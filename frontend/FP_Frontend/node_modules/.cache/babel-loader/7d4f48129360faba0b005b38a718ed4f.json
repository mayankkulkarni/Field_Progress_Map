{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function fetchProgress(_x, _x2) {\n  return _fetchProgress.apply(this, arguments);\n}\n\nfunction _fetchProgress() {\n  _fetchProgress = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(response, onProgress) {\n    var onDone,\n        onError,\n        contentLength,\n        totalBytes,\n        progressStream,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            onDone = _args.length > 2 && _args[2] !== undefined ? _args[2] : function () {};\n            onError = _args.length > 3 && _args[3] !== undefined ? _args[3] : function () {};\n            _context.next = 4;\n            return response;\n\n          case 4:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", response);\n\n          case 7:\n            if (response.body) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", response);\n\n          case 9:\n            contentLength = response.headers.get('content-length');\n            totalBytes = contentLength && parseInt(contentLength, 10);\n\n            if (contentLength > 0) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\", response);\n\n          case 13:\n            if (!(typeof ReadableStream === 'undefined')) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", response);\n\n          case 15:\n            progressStream = new ReadableStream({\n              start: function start(controller) {\n                var reader = response.body.getReader();\n                read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n              }\n            });\n            return _context.abrupt(\"return\", new Response(progressStream));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchProgress.apply(this, arguments);\n}\n\nfunction read(_x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _read.apply(this, arguments);\n}\n\nfunction _read() {\n  _read = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n    var _ref, done, value, percent;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return reader.read();\n\n          case 3:\n            _ref = _context2.sent;\n            done = _ref.done;\n            value = _ref.value;\n\n            if (!done) {\n              _context2.next = 10;\n              break;\n            }\n\n            onDone();\n            controller.close();\n            return _context2.abrupt(\"return\");\n\n          case 10:\n            loadedBytes += value.byteLength;\n            percent = Math.round(loadedBytes / totalBytes * 100);\n            onProgress(percent, {\n              loadedBytes: loadedBytes,\n              totalBytes: totalBytes\n            });\n            controller.enqueue(value);\n            _context2.next = 16;\n            return read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n\n          case 16:\n            _context2.next = 22;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](0);\n            controller.error(_context2.t0);\n            onError(_context2.t0);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 18]]);\n  }));\n  return _read.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}