{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { createModuleInjection } from '@luma.gl/core';\nimport { PROJECT_COORDINATE_SYSTEM } from '../project/constants';\nimport { Vector3, Matrix4 } from 'math.gl';\nimport memoize from '../../utils/memoize';\nimport { pixelsToWorld } from 'viewport-mercator-project';\nvar vs = \"\\nconst int max_lights = 2;\\nuniform mat4 shadow_uViewProjectionMatrices[max_lights];\\nuniform vec4 shadow_uProjectCenters[max_lights];\\nuniform bool shadow_uDrawShadowMap;\\nuniform bool shadow_uUseShadowMap;\\nuniform int shadow_uLightId;\\nuniform float shadow_uLightCount;\\n\\nvarying vec3 shadow_vPosition[max_lights];\\n\\nvec4 shadow_setVertexPosition(vec4 position_commonspace) {\\n  if (shadow_uDrawShadowMap) {\\n    return project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[shadow_uLightId], shadow_uProjectCenters[shadow_uLightId]);\\n  }\\n  if (shadow_uUseShadowMap) {\\n    for (int i = 0; i < max_lights; i++) {\\n      if(i < int(shadow_uLightCount)) {\\n        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, shadow_uViewProjectionMatrices[i], shadow_uProjectCenters[i]);\\n        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;\\n      }\\n    }\\n  }\\n  return gl_Position;\\n}\\n\";\nvar fs = \"\\nconst int max_lights = 2;\\nuniform bool shadow_uDrawShadowMap;\\nuniform bool shadow_uUseShadowMap;\\nuniform sampler2D shadow_uShadowMap0;\\nuniform sampler2D shadow_uShadowMap1;\\nuniform vec4 shadow_uColor;\\nuniform float shadow_uLightCount;\\n\\nvarying vec3 shadow_vPosition[max_lights];\\n\\nconst vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);\\nconst vec4 bitUnpackShift = 1.0 / bitPackShift;\\nconst vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);\\n\\nfloat shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {\\n  vec4 rgbaDepth = texture2D(shadowMap, position.xy);\\n\\n  float z = dot(rgbaDepth, bitUnpackShift);\\n  return smoothstep(0.001, 0.01, position.z - z);\\n}\\n\\nvec4 shadow_filterShadowColor(vec4 color) {\\n  if (shadow_uDrawShadowMap) {\\n    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);\\n    rgbaDepth -= rgbaDepth.gbaa * bitMask;\\n    return rgbaDepth;\\n  }\\n  if (shadow_uUseShadowMap) {\\n    float shadowAlpha = 0.0;\\n    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);\\n    if(shadow_uLightCount > 1.0) {\\n      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);\\n    }\\n    shadowAlpha *= shadow_uColor.a / shadow_uLightCount;\\n    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);\\n\\n    return vec4(\\n      mix(color.rgb, shadow_uColor.rgb, shadowAlpha / blendedAlpha),\\n      blendedAlpha\\n    );\\n  }\\n  return color;\\n}\\n\";\nvar moduleName = 'shadow';\nvar getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);\nvar getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);\ncreateModuleInjection(moduleName, {\n  hook: 'vs:DECKGL_FILTER_GL_POSITION',\n  injection: \"\\nposition = shadow_setVertexPosition(geometry.position);\\n  \"\n});\ncreateModuleInjection(moduleName, {\n  hook: 'fs:DECKGL_FILTER_COLOR',\n  injection: \"\\ncolor = shadow_filterShadowColor(color);\\n  \"\n});\nvar DEFAULT_SHADOW_COLOR = [0, 0, 0, 1.0];\nvar VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\n\nfunction screenToCommonSpace(xyz, pixelUnprojectionMatrix) {\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      z = _xyz[2];\n\n  var coord = pixelsToWorld([x, y, z], pixelUnprojectionMatrix);\n\n  if (Number.isFinite(z)) {\n    return coord;\n  }\n\n  return [coord[0], coord[1], 0];\n}\n\nfunction getViewportCenterPosition(_ref) {\n  var viewport = _ref.viewport,\n      center = _ref.center;\n  return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center);\n}\n\nfunction getViewProjectionMatrices(_ref2) {\n  var viewport = _ref2.viewport,\n      shadowMatrices = _ref2.shadowMatrices;\n  var projectionMatrices = [];\n  var pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;\n  var farZ = viewport.isGeospatial ? undefined : 1;\n  var corners = [[0, 0, farZ], [viewport.width, 0, farZ], [0, viewport.height, farZ], [viewport.width, viewport.height, farZ], [0, 0, -1], [viewport.width, 0, -1], [0, viewport.height, -1], [viewport.width, viewport.height, -1]].map(function (pixel) {\n    return screenToCommonSpace(pixel, pixelUnprojectionMatrix);\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var shadowMatrix = _step.value;\n      var viewMatrix = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());\n      var positions = corners.map(function (corner) {\n        return viewMatrix.transform(corner);\n      });\n      var projectionMatrix = new Matrix4().ortho({\n        left: Math.min.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[0];\n        }))),\n        right: Math.max.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[0];\n        }))),\n        bottom: Math.min.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[1];\n        }))),\n        top: Math.max.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return position[1];\n        }))),\n        near: Math.min.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return -position[2];\n        }))),\n        far: Math.max.apply(Math, _toConsumableArray(positions.map(function (position) {\n          return -position[2];\n        })))\n      });\n      projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));\n    };\n\n    for (var _iterator = shadowMatrices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      _loop();\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return projectionMatrices;\n}\n\nfunction createShadowUniforms() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var uniforms = {\n    shadow_uDrawShadowMap: Boolean(opts.drawToShadowMap),\n    shadow_uUseShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,\n    shadow_uColor: opts.shadowColor || DEFAULT_SHADOW_COLOR,\n    shadow_uLightId: opts.shadowLightId || 0,\n    shadow_uLightCount: opts.shadowMatrices.length\n  };\n  var center = getMemoizedViewportCenterPosition({\n    viewport: opts.viewport,\n    center: context.project_uCenter\n  });\n  var projectCenters = [];\n  var viewProjectionMatrices = getMemoizedViewProjectionMatrices({\n    shadowMatrices: opts.shadowMatrices,\n    viewport: opts.viewport\n  }).slice();\n\n  for (var i = 0; i < opts.shadowMatrices.length; i++) {\n    var viewProjectionMatrix = viewProjectionMatrices[i];\n    var viewProjectionMatrixCentered = viewProjectionMatrix.clone().translate(new Vector3(opts.viewport.center).negate());\n\n    if (context.project_uCoordinateSystem === PROJECT_COORDINATE_SYSTEM.LNG_LAT) {\n      viewProjectionMatrices[i] = viewProjectionMatrixCentered;\n      projectCenters[i] = [0, 0, 0, 0];\n    } else {\n      viewProjectionMatrices[i] = viewProjectionMatrix.clone().multiplyRight(VECTOR_TO_POINT_MATRIX);\n      projectCenters[i] = viewProjectionMatrixCentered.transform(center);\n    }\n  }\n\n  for (var _i = 0; _i < viewProjectionMatrices.length; _i++) {\n    uniforms[\"shadow_uViewProjectionMatrices[\".concat(_i, \"]\")] = viewProjectionMatrices[_i];\n    uniforms[\"shadow_uProjectCenters[\".concat(_i, \"]\")] = projectCenters[_i];\n\n    if (opts.shadowMaps && opts.shadowMaps.length > 0) {\n      uniforms[\"shadow_uShadowMap\".concat(_i)] = opts.shadowMaps[_i];\n    } else {\n      uniforms[\"shadow_uShadowMap\".concat(_i)] = opts.dummyShadowMap;\n    }\n  }\n\n  return uniforms;\n}\n\nexport default {\n  name: 'shadow',\n  dependencies: ['project'],\n  vs: vs,\n  fs: fs,\n  getUniforms: function getUniforms() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (opts.drawToShadowMap || opts.shadowMaps && opts.shadowMaps.length > 0) {\n      var shadowUniforms = {};\n      var _opts$shadowEnabled = opts.shadowEnabled,\n          shadowEnabled = _opts$shadowEnabled === void 0 ? true : _opts$shadowEnabled;\n\n      if (shadowEnabled && opts.shadowMatrices && opts.shadowMatrices.length > 0) {\n        Object.assign(shadowUniforms, createShadowUniforms(opts, context));\n      } else {\n        Object.assign(shadowUniforms, {\n          shadow_uDrawShadowMap: false,\n          shadow_uUseShadowMap: false\n        });\n      }\n\n      return shadowUniforms;\n    }\n\n    return {};\n  }\n};","map":null,"metadata":{},"sourceType":"module"}