{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function checkFetchResponseStatus(_x) {\n  return _checkFetchResponseStatus.apply(this, arguments);\n}\n\nfunction _checkFetchResponseStatus() {\n  _checkFetchResponseStatus = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(response) {\n    var errorMessage, text;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (response.ok) {\n              _context.next = 12;\n              break;\n            }\n\n            errorMessage = \"fetch failed \".concat(response.status, \" \");\n            _context.prev = 2;\n            _context.next = 5;\n            return response.text();\n\n          case 5:\n            text = _context.sent;\n            errorMessage += text;\n            _context.next = 11;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n\n          case 11:\n            throw new Error(errorMessage);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _checkFetchResponseStatus.apply(this, arguments);\n}\n\nexport function checkFetchResponseStatusSync(response) {\n  if (!response.ok) {\n    throw new Error(\"fetch failed \".concat(response.status));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}