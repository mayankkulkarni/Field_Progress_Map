{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assert from '../utils/assert';\nexport function validateProps(props) {\n  var propTypes = getPropTypes(props);\n\n  for (var propName in propTypes) {\n    var propType = propTypes[propName];\n    var validate = propType.validate;\n\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(\"Invalid prop \".concat(propName, \": \").concat(props[propName]));\n    }\n  }\n}\nexport function diffProps(props, oldProps) {\n  var propsChangedReason = compareProps({\n    newProps: props,\n    oldProps: oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {\n      data: null,\n      updateTriggers: null,\n      extensions: null,\n      transitions: null\n    }\n  });\n  var dataChangedReason = diffDataProps(props, oldProps);\n  var updateTriggersChangedReason = false;\n\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps) {\n  if (!props.transitions) {\n    return null;\n  }\n\n  var result = {};\n  var propTypes = getPropTypes(props);\n\n  for (var key in props.transitions) {\n    var propType = propTypes[key];\n    var type = propType && propType.type;\n    var isTransitionable = type === 'number' || type === 'color' || type === 'array';\n\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n    }\n  }\n\n  return result;\n}\n\nexport function compareProps() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      newProps = _ref.newProps,\n      oldProps = _ref.oldProps,\n      _ref$ignoreProps = _ref.ignoreProps,\n      ignoreProps = _ref$ignoreProps === void 0 ? {} : _ref$ignoreProps,\n      _ref$propTypes = _ref.propTypes,\n      propTypes = _ref$propTypes === void 0 ? {} : _ref$propTypes,\n      _ref$triggerName = _ref.triggerName,\n      triggerName = _ref$triggerName === void 0 ? 'props' : _ref$triggerName;\n\n  assert(oldProps !== undefined && newProps !== undefined, 'compareProps args');\n\n  if (oldProps === newProps) {\n    return null;\n  }\n\n  if (_typeof(newProps) !== 'object' || newProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n\n  if (_typeof(oldProps) !== 'object' || oldProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n\n  for (var _i = 0, _Object$keys = Object.keys(newProps); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return \"\".concat(triggerName, \".\").concat(key, \" added\");\n      }\n\n      var changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n\n      if (changed) {\n        return \"\".concat(triggerName, \".\").concat(key, \" \").concat(changed);\n      }\n    }\n  }\n\n  for (var _i2 = 0, _Object$keys2 = Object.keys(oldProps); _i2 < _Object$keys2.length; _i2++) {\n    var _key = _Object$keys2[_i2];\n\n    if (!(_key in ignoreProps)) {\n      if (!(_key in newProps)) {\n        return \"\".concat(triggerName, \".\").concat(_key, \" dropped\");\n      }\n\n      if (!Object.hasOwnProperty.call(newProps, _key)) {\n        var _changed = comparePropValues(newProps[_key], oldProps[_key], propTypes[_key]);\n\n        if (_changed) {\n          return \"\".concat(triggerName, \".\").concat(_key, \" \").concat(_changed);\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction comparePropValues(newProp, oldProp, propType) {\n  var equal = propType && propType.equal;\n\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    equal = newProp && oldProp && newProp.equals;\n\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  var dataChanged = null;\n  var dataComparator = props.dataComparator,\n      _dataDiff = props._dataDiff;\n\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  if ('all' in props.updateTriggers) {\n    var diffReason = diffUpdateTrigger(props, oldProps, 'all');\n\n    if (diffReason) {\n      return {\n        all: true\n      };\n    }\n  }\n\n  var triggerChanged = {};\n  var reason = false;\n\n  for (var triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      var _diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n\n      if (_diffReason) {\n        triggerChanged[triggerName] = true;\n        reason = triggerChanged;\n      }\n    }\n  }\n\n  return reason;\n}\n\nfunction diffExtensions(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  var oldExtensions = oldProps.extensions;\n  var extensions = props.extensions;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n\n  for (var i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  var newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  var oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  var diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName: triggerName\n  });\n  return diffReason;\n}\n\nfunction getPropTypes(props) {\n  var layer = props._component;\n  var LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}","map":null,"metadata":{},"sourceType":"module"}