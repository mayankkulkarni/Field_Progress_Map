{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Deck, experimental } from '@deck.gl/core';\nvar memoize = experimental.memoize;\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nvar propTypes = Deck.getPropTypes(PropTypes);\nvar defaultProps = Deck.defaultProps;\n\nvar DeckGL = function (_React$Component) {\n  _inherits(DeckGL, _React$Component);\n\n  function DeckGL(props) {\n    var _this;\n\n    _classCallCheck(this, DeckGL);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeckGL).call(this, props));\n    _this.viewports = null;\n    _this.children = null;\n    _this._needsRedraw = null;\n    _this.pickObject = _this.pickObject.bind(_assertThisInitialized(_this));\n    _this.pickMultipleObjects = _this.pickMultipleObjects.bind(_assertThisInitialized(_this));\n    _this.pickObjects = _this.pickObjects.bind(_assertThisInitialized(_this));\n    _this._extractJSXLayers = memoize(extractJSXLayers);\n    _this._positionChildrenUnderViews = memoize(positionChildrenUnderViews);\n    return _this;\n  }\n\n  _createClass(DeckGL, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var DeckClass = this.props.Deck || Deck;\n      this.deck = this.deck || new DeckClass(Object.assign({}, this.props, {\n        canvas: this.deckCanvas,\n        _customRender: this._customRender.bind(this)\n      }));\n\n      this._updateFromProps(this.props);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      this._updateFromProps(nextProps);\n\n      var childrenChanged = this.children !== this._parseJSX(nextProps).children;\n\n      var viewsChanged = this.deck.viewManager && this.deck.viewManager.needsRedraw();\n      return childrenChanged && !viewsChanged;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._redrawDeck();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deck.finalize();\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      return this.deck.pickObject(opts);\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(opts) {\n      return this.deck.pickMultipleObjects(opts);\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this.deck.pickObjects(opts);\n    }\n  }, {\n    key: \"_redrawDeck\",\n    value: function _redrawDeck() {\n      if (this._needsRedraw) {\n        this.deck._drawLayers(this._needsRedraw);\n\n        this._needsRedraw = null;\n      }\n    }\n  }, {\n    key: \"_customRender\",\n    value: function _customRender(redrawReason) {\n      this._needsRedraw = redrawReason;\n      var viewports = this.deck.viewManager.getViewports();\n\n      if (viewports !== this.viewports) {\n        this.forceUpdate();\n      } else {\n        this._redrawDeck();\n      }\n    }\n  }, {\n    key: \"_parseJSX\",\n    value: function _parseJSX(props) {\n      return this._extractJSXLayers({\n        layers: props.layers,\n        views: props.views,\n        children: props.children\n      });\n    }\n  }, {\n    key: \"_updateFromProps\",\n    value: function _updateFromProps(props) {\n      var _this$_parseJSX = this._parseJSX(props),\n          layers = _this$_parseJSX.layers,\n          views = _this$_parseJSX.views;\n\n      var deckProps = Object.assign({}, props, {\n        layers: layers,\n        views: views\n      });\n      this.deck.setProps(deckProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _ref = this.deck || {},\n          viewManager = _ref.viewManager;\n\n      this.viewports = viewManager && viewManager.getViewports();\n      this.children = this._parseJSX(this.props).children;\n\n      var children = this._positionChildrenUnderViews({\n        children: this.children,\n        viewports: this.viewports,\n        deck: this.deck,\n        ContextProvider: this.props.ContextProvider\n      });\n\n      var style = Object.assign({}, {\n        position: 'absolute',\n        left: 0,\n        top: 0\n      }, this.props.style);\n      var canvas = createElement('canvas', {\n        ref: function ref(c) {\n          return _this2.deckCanvas = c;\n        },\n        key: 'deck-canvas',\n        id: this.props.id,\n        style: style\n      });\n      return createElement('div', {\n        id: 'deckgl-wrapper'\n      }, [children, canvas]);\n    }\n  }]);\n\n  return DeckGL;\n}(React.Component);\n\nexport { DeckGL as default };\nDeckGL.propTypes = propTypes;\nDeckGL.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}