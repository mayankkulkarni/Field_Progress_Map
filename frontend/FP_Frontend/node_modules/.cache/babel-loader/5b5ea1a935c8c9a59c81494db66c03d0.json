{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { log } from '@luma.gl/core';\nimport Display from './display';\nimport { createEnterVRButton } from './vr-button';\n\nvar VRDisplay = function (_Display) {\n  _inherits(VRDisplay, _Display);\n\n  _createClass(VRDisplay, null, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window;\n    }\n  }]);\n\n  function VRDisplay(props) {\n    var _this;\n\n    _classCallCheck(this, VRDisplay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VRDisplay).call(this, props));\n    _this._vrSupported = VRDisplay.isSupported();\n\n    if (_this._vrSupported) {\n      _this.vrFrameData = new window.VRFrameData();\n      _this.vrPresenting = false;\n      _this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', _this._vrDisplayPresentChange.bind(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n\n  _createClass(VRDisplay, [{\n    key: \"delete\",\n    value: function _delete() {\n      _get(_getPrototypeOf(VRDisplay.prototype), \"delete\", this).call(this);\n\n      this._removeVRButton();\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews(options) {\n      if (this._vrSupported) {\n        this._addVRButton();\n      }\n\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.getFrameData(this.vrFrameData);\n        var _this$vrFrameData = this.vrFrameData,\n            leftProjectionMatrix = _this$vrFrameData.leftProjectionMatrix,\n            leftViewMatrix = _this$vrFrameData.leftViewMatrix,\n            rightProjectionMatrix = _this$vrFrameData.rightProjectionMatrix,\n            rightViewMatrix = _this$vrFrameData.rightViewMatrix;\n        var width = options.width,\n            height = options.height;\n        return [{\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }, {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }];\n      }\n\n      return _get(_getPrototypeOf(VRDisplay.prototype), \"getViews\", this).call(this, options);\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.submitFrame();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      var _this2 = this;\n\n      if (this.vrPresenting) {\n        this.vrDisplay.requestAnimationFrame(function () {\n          _this2.vrFrame = true;\n          renderFrame();\n          _this2.vrFrame = false;\n        });\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_addVRButton\",\n    value: function () {\n      var _addVRButton2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var canvas, displays;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.vrButton) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                canvas = this._getCanvas();\n\n                if (canvas) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 7;\n                return navigator.getVRDisplays();\n\n              case 7:\n                displays = _context.sent;\n\n                if (displays && displays.length) {\n                  log.info(2, 'Found VR Displays', displays)();\n                  this.vrDisplay = displays[0];\n                  this.vrButton = createEnterVRButton({\n                    canvas: canvas,\n                    title: \"Enter VR (\".concat(this.vrDisplay.displayName, \")\")\n                  });\n\n                  this.vrButton.onclick = function () {\n                    return _this3._startDisplay();\n                  };\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _addVRButton() {\n        return _addVRButton2.apply(this, arguments);\n      }\n\n      return _addVRButton;\n    }()\n  }, {\n    key: \"_getCanvas\",\n    value: function _getCanvas() {\n      return this.animationLoop.canvas || this.animationLoop.gl && this.animationLoop.gl.canvas;\n    }\n  }, {\n    key: \"_removeVRButton\",\n    value: function _removeVRButton() {\n      if (this.vrButton) {}\n    }\n  }, {\n    key: \"_startDisplay\",\n    value: function _startDisplay() {\n      this.vrDisplay.requestPresent([{\n        source: this._getCanvas()\n      }]);\n    }\n  }, {\n    key: \"_vrDisplayPresentChange\",\n    value: function _vrDisplayPresentChange() {\n      if (this.vrDisplay.isPresenting) {\n        log.info(2, 'Entering VR')();\n        this.vrPresenting = true;\n        this.vrButton.style.display = 'none';\n      } else {\n        log.info(2, 'Exiting VR')();\n        this.vrPresenting = false;\n        this.vrButton.style.display = 'block';\n      }\n    }\n  }]);\n\n  return VRDisplay;\n}(Display);\n\nexport { VRDisplay as default };","map":null,"metadata":{},"sourceType":"module"}