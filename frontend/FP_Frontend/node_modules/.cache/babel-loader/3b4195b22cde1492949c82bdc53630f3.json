{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isWebGL2, ModelNode, log, pbr } from '@luma.gl/core';\nimport GLTFMaterialParser from './gltf-material-parser';\nvar vs = \"\\n#if (__VERSION__ < 300)\\n  #define _attr attribute\\n#else\\n  #define _attr in\\n#endif\\n\\n  _attr vec4 POSITION;\\n\\n  #ifdef HAS_NORMALS\\n    _attr vec4 NORMAL;\\n  #endif\\n\\n  #ifdef HAS_TANGENTS\\n    _attr vec4 TANGENT;\\n  #endif\\n\\n  #ifdef HAS_UV\\n    _attr vec2 TEXCOORD_0;\\n  #endif\\n\\n  void main(void) {\\n    vec4 _NORMAL = vec4(0.);\\n    vec4 _TANGENT = vec4(0.);\\n    vec2 _TEXCOORD_0 = vec2(0.);\\n\\n    #ifdef HAS_NORMALS\\n      _NORMAL = NORMAL;\\n    #endif\\n\\n    #ifdef HAS_TANGENTS\\n      _TANGENT = TANGENT;\\n    #endif\\n\\n    #ifdef HAS_UV\\n      _TEXCOORD_0 = TEXCOORD_0;\\n    #endif\\n\\n    pbr_setPositionNormalTangentUV(POSITION, _NORMAL, _TANGENT, _TEXCOORD_0);\\n    gl_Position = u_MVPMatrix * POSITION;\\n  }\\n\";\nvar fs = \"\\n#if (__VERSION__ < 300)\\n  #define fragmentColor gl_FragColor\\n#else\\n  out vec4 fragmentColor;\\n#endif\\n\\n  void main(void) {\\n    fragmentColor = pbr_filterColor(vec4(0));\\n  }\\n\";\n\nfunction addVersionToShader(gl, source) {\n  if (isWebGL2(gl)) {\n    return \"#version 300 es\\n\".concat(source);\n  }\n\n  return source;\n}\n\nexport default function createGLTFModel(gl, options) {\n  var id = options.id,\n      drawMode = options.drawMode,\n      vertexCount = options.vertexCount,\n      attributes = options.attributes,\n      modelOptions = options.modelOptions;\n  var materialParser = new GLTFMaterialParser(gl, options);\n  log.info(4, 'createGLTFModel defines: ', materialParser.defines)();\n  var managedResources = [];\n  managedResources.push.apply(managedResources, _toConsumableArray(materialParser.generatedTextures));\n  managedResources.push.apply(managedResources, _toConsumableArray(Object.values(attributes).map(function (attribute) {\n    return attribute.buffer;\n  })));\n  var model = new ModelNode(gl, Object.assign({\n    id: id,\n    drawMode: drawMode,\n    vertexCount: vertexCount,\n    modules: [pbr],\n    defines: materialParser.defines,\n    parameters: materialParser.parameters,\n    vs: addVersionToShader(gl, vs),\n    fs: addVersionToShader(gl, fs),\n    managedResources: managedResources\n  }, modelOptions));\n  model.setProps({\n    attributes: attributes\n  });\n  model.setUniforms(materialParser.uniforms);\n  return model;\n}","map":null,"metadata":{},"sourceType":"module"}