{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar channelHandles = 1;\nvar animationHandles = 1;\nexport var Timeline = function () {\n  function Timeline() {\n    _classCallCheck(this, Timeline);\n\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  _createClass(Timeline, [{\n    key: \"addChannel\",\n    value: function addChannel(props) {\n      var _props$delay = props.delay,\n          delay = _props$delay === void 0 ? 0 : _props$delay,\n          _props$duration = props.duration,\n          duration = _props$duration === void 0 ? Number.POSITIVE_INFINITY : _props$duration,\n          _props$rate = props.rate,\n          rate = _props$rate === void 0 ? 1 : _props$rate,\n          _props$repeat = props.repeat,\n          repeat = _props$repeat === void 0 ? 1 : _props$repeat;\n      var handle = channelHandles++;\n      var channel = {\n        time: 0,\n        delay: delay,\n        duration: duration,\n        rate: rate,\n        repeat: repeat\n      };\n\n      this._setChannelTime(channel, this.time);\n\n      this.channels.set(handle, channel);\n      return handle;\n    }\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(handle) {\n      this.channels[\"delete\"](handle);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              animationHandle = _step$value[0],\n              animation = _step$value[1];\n\n          if (animation.channel === handle) {\n            this.detachAnimation(animationHandle);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isFinished\",\n    value: function isFinished(handle) {\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return false;\n      }\n\n      return this.time >= channel.delay + channel.duration * channel.repeat;\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime(handle) {\n      if (handle === undefined) {\n        return this.time;\n      }\n\n      var channel = this.channels.get(handle);\n\n      if (channel === undefined) {\n        return -1;\n      }\n\n      return channel.time;\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime(time) {\n      this.time = Math.max(0, time);\n      var channels = this.channels.values();\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = channels[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var channel = _step2.value;\n\n          this._setChannelTime(channel, this.time);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var animations = this.animations.values();\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = animations[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var animationData = _step3.value;\n          var animation = animationData.animation,\n              _channel = animationData.channel;\n          animation.setTime(this.getTime(_channel));\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.playing = true;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.playing = false;\n      this.lastEngineTime = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.setTime(0);\n    }\n  }, {\n    key: \"attachAnimation\",\n    value: function attachAnimation(animation, channelHandle) {\n      var animationHandle = animationHandles++;\n      this.animations.set(animationHandle, {\n        animation: animation,\n        channel: channelHandle\n      });\n      animation.setTime(this.getTime(channelHandle));\n      return animationHandle;\n    }\n  }, {\n    key: \"detachAnimation\",\n    value: function detachAnimation(handle) {\n      this.animations[\"delete\"](handle);\n    }\n  }, {\n    key: \"update\",\n    value: function update(engineTime) {\n      if (this.playing) {\n        if (this.lastEngineTime === -1) {\n          this.lastEngineTime = engineTime;\n        }\n\n        this.setTime(this.time + (engineTime - this.lastEngineTime));\n        this.lastEngineTime = engineTime;\n      }\n    }\n  }, {\n    key: \"_setChannelTime\",\n    value: function _setChannelTime(channel, time) {\n      var offsetTime = time - channel.delay;\n      var totalDuration = channel.duration * channel.repeat;\n\n      if (offsetTime >= totalDuration) {\n        channel.time = channel.duration * channel.rate;\n      } else {\n        channel.time = Math.max(0, offsetTime) % channel.duration;\n        channel.time *= channel.rate;\n      }\n    }\n  }]);\n\n  return Timeline;\n}();","map":null,"metadata":{},"sourceType":"module"}