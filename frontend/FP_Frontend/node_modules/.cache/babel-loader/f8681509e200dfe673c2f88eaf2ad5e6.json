{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { parseGLTFSync, parseGLTF } from './lib/parse-gltf';\nimport GLTFParser from './lib/deprecated/gltf-parser';\nvar defaultOptions = {\n  gltf: {\n    parserVersion: 1\n  },\n  uri: ''\n};\nexport default {\n  name: 'glTF',\n  extensions: ['gltf', 'glb'],\n  mimeType: 'model/gltf+json',\n  text: true,\n  binary: true,\n  test: 'glTF',\n  parse: parse,\n  parseSync: parseSync,\n  defaultOptions: defaultOptions\n};\nexport function parse(_x) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer) {\n    var options,\n        context,\n        gltfParser,\n        _options2,\n        _options2$byteOffset,\n        byteOffset,\n        gltf,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            context = _args.length > 2 ? _args[2] : undefined;\n            options = _objectSpread({}, defaultOptions, {}, options);\n\n            if (!(options.gltf.parserVersion !== 2 && options.useGLTFParser !== false)) {\n              _context.next = 6;\n              break;\n            }\n\n            gltfParser = new GLTFParser();\n            return _context.abrupt(\"return\", gltfParser.parse(arrayBuffer, options));\n\n          case 6:\n            _options2 = options, _options2$byteOffset = _options2.byteOffset, byteOffset = _options2$byteOffset === void 0 ? 0 : _options2$byteOffset;\n            gltf = {};\n            _context.next = 10;\n            return parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nexport function parseSync(arrayBuffer) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var context = arguments.length > 2 ? arguments[2] : undefined;\n  options = _objectSpread({}, defaultOptions, {}, options);\n\n  if (options.gltf.parserVersion !== 2 && options.useGLTFParser !== false) {\n    return new GLTFParser().parseSync(arrayBuffer, options);\n  }\n\n  var _options = options,\n      _options$byteOffset = _options.byteOffset,\n      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var gltf = {};\n  return parseGLTFSync(gltf, arrayBuffer, byteOffset, options, context);\n}","map":null,"metadata":{},"sourceType":"module"}