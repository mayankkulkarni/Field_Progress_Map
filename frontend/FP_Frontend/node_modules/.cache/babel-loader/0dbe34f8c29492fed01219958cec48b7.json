{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { padTo4Bytes, copyToArray } from '@loaders.gl/loader-utils';\nimport { isImage as _isImage } from '@loaders.gl/images';\nimport { getAccessorTypeFromSize, getComponentTypeFromArray } from '../gltf-utils/gltf-utils';\nimport encodeGLBSync from '../encode-glb';\nimport packBinaryJson from './packed-json/pack-binary-json';\n\nvar GLBBuilder = function () {\n  function GLBBuilder() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GLBBuilder);\n\n    this.byteLength = 0;\n    this.json = {\n      buffers: [{\n        byteLength: 0\n      }],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n    this.sourceBuffers = [];\n    this.log = options.log || console;\n  }\n\n  _createClass(GLBBuilder, [{\n    key: \"getByteLength\",\n    value: function getByteLength() {\n      return this.byteLength;\n    }\n  }, {\n    key: \"isImage\",\n    value: function isImage(imageData) {\n      return _isImage(imageData);\n    }\n  }, {\n    key: \"encodeSync\",\n    value: function encodeSync() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.encodeAsGLB(options);\n    }\n  }, {\n    key: \"encodeAsGLB\",\n    value: function encodeAsGLB() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._packBinaryChunk();\n\n      if (options.magic) {\n        console.warn('Custom glTF magic number no longer supported');\n      }\n\n      var glb = {\n        version: 2,\n        json: this.json,\n        binary: this.arrayBuffer\n      };\n      var byteLength = encodeGLBSync(glb, null, 0, options);\n      var glbArrayBuffer = new ArrayBuffer(byteLength);\n      var dataView = new DataView(glbArrayBuffer);\n      encodeGLBSync(glb, dataView, 0, options);\n      return glbArrayBuffer;\n    }\n  }, {\n    key: \"addApplicationData\",\n    value: function addApplicationData(key, data) {\n      var packOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var jsonData = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n      this.json[key] = jsonData;\n      return this;\n    }\n  }, {\n    key: \"addBuffer\",\n    value: function addBuffer(sourceBuffer) {\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        size: 3\n      };\n      var bufferViewIndex = this.addBufferView(sourceBuffer);\n      var accessorDefaults = {\n        size: accessor.size,\n        componentType: getComponentTypeFromArray(sourceBuffer),\n        count: Math.round(sourceBuffer.length / accessor.size)\n      };\n      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n    }\n  }, {\n    key: \"addBufferView\",\n    value: function addBufferView(buffer) {\n      var byteLength = buffer.byteLength || buffer.length;\n      this.json.bufferViews.push({\n        buffer: 0,\n        byteOffset: this.byteLength,\n        byteLength: byteLength\n      });\n      this.byteLength += padTo4Bytes(byteLength);\n      this.sourceBuffers.push(buffer);\n      return this.json.bufferViews.length - 1;\n    }\n  }, {\n    key: \"addAccessor\",\n    value: function addAccessor(bufferViewIndex, accessor) {\n      this.json.accessors.push({\n        bufferView: bufferViewIndex,\n        type: getAccessorTypeFromSize(accessor.size),\n        componentType: accessor.componentType,\n        count: accessor.count\n      });\n      return this.json.accessors.length - 1;\n    }\n  }, {\n    key: \"_pack\",\n    value: function _pack() {\n      this._packBinaryChunk();\n\n      return {\n        arrayBuffer: this.arrayBuffer,\n        json: this.json\n      };\n    }\n  }, {\n    key: \"_packBinaryChunk\",\n    value: function _packBinaryChunk() {\n      if (this.arrayBuffer) {\n        return;\n      }\n\n      var totalByteLength = this.byteLength;\n      var arrayBuffer = new ArrayBuffer(totalByteLength);\n      var targetArray = new Uint8Array(arrayBuffer);\n      var dstByteOffset = 0;\n\n      for (var i = 0; i < this.sourceBuffers.length; i++) {\n        var sourceBuffer = this.sourceBuffers[i];\n        dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n      }\n\n      this.json.buffers[0].byteLength = totalByteLength;\n      this.arrayBuffer = arrayBuffer;\n      this.sourceBuffers = [];\n    }\n  }, {\n    key: \"_getInternalCounts\",\n    value: function _getInternalCounts() {\n      return {\n        buffers: this.json.buffers.length,\n        bufferViews: this.json.bufferViews.length,\n        accessors: this.json.accessors.length,\n        images: this.json.images.length\n      };\n    }\n  }]);\n\n  return GLBBuilder;\n}();\n\nexport { GLBBuilder as default };","map":null,"metadata":{},"sourceType":"module"}