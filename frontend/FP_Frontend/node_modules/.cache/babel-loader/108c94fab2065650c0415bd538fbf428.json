{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer } from '@deck.gl/core';\nimport { Model, Geometry, PhongMaterial } from '@luma.gl/core';\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar DEFAULT_NORMAL = [0, 0, 1];\nvar defaultMaterial = new PhongMaterial();\nvar defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {\n    type: 'number',\n    min: 0,\n    value: 10\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getNormal: {\n    type: 'accessor',\n    value: DEFAULT_NORMAL\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: defaultMaterial,\n  radiusPixels: {\n    deprecatedFor: 'pointSize'\n  }\n};\n\nfunction normalizeData(data) {\n  var header = data.header,\n      attributes = data.attributes;\n\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nvar PointCloudLayer = function (_Layer) {\n  _inherits(PointCloudLayer, _Layer);\n\n  function PointCloudLayer() {\n    _classCallCheck(this, PointCloudLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PointCloudLayer).apply(this, arguments));\n  }\n\n  _createClass(PointCloudLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(id) {\n      return _get(_getPrototypeOf(PointCloudLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: ['project32', 'gouraud-lighting', 'picking']\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceNormals: {\n          size: 3,\n          transition: true,\n          accessor: 'getNormal',\n          defaultValue: DEFAULT_NORMAL\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: DEFAULT_COLOR\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(PointCloudLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n\n      if (changeFlags.dataChanged) {\n        normalizeData(props.data);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          pointSize = _this$props.pointSize,\n          sizeUnits = _this$props.sizeUnits;\n      var sizeMultiplier = sizeUnits === 'meters' ? viewport.distanceScales.pixelsPerMeter[2] : 1;\n      this.state.model.setUniforms(Object.assign({}, uniforms, {\n        radiusPixels: pointSize * sizeMultiplier\n      })).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [];\n\n      for (var i = 0; i < 3; i++) {\n        var angle = i / 3 * Math.PI * 2;\n        positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n      }\n\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return PointCloudLayer;\n}(Layer);\n\nexport { PointCloudLayer as default };\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}