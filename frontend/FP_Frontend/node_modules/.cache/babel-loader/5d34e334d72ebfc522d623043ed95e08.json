{"ast":null,"code":"import { selectLoader } from './select-loader';\nimport { isLoaderObject } from './loader-utils/normalize-loader';\nimport { mergeLoaderAndUserOptions } from './loader-utils/normalize-options';\nimport { getArrayBufferOrStringFromDataSync } from './loader-utils/get-data';\nimport { getLoaderContext } from './loader-utils/get-loader-context';\nexport function parseSync(data, loaders, options, url) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  var loader = selectLoader(loaders, url, data);\n\n  if (!loader) {\n    return null;\n  }\n\n  options = mergeLoaderAndUserOptions(options, loader);\n  var context = getLoaderContext({\n    url: url,\n    parseSync: parseSync\n  }, options);\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  throw new Error(\"Could not parse \".concat(context.url || 'data', \" using \").concat(loader.name, \" loader\"));\n}","map":null,"metadata":{},"sourceType":"module"}