{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { deepEqual } from '../utils/deep-equal';\nimport { default as LightingEffect } from '../effects/lighting/lighting-effect';\nvar DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n\nvar EffectManager = function () {\n  function EffectManager() {\n    _classCallCheck(this, EffectManager);\n\n    this.effects = [];\n    this._internalEffects = [];\n    this._needsRedraw = 'Initial render';\n    this.setEffects();\n  }\n\n  _createClass(EffectManager, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('effects' in props) {\n        if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n          this.setEffects(props.effects);\n          this._needsRedraw = 'effects changed';\n        }\n      }\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"getEffects\",\n    value: function getEffects() {\n      return this._internalEffects;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      this.cleanup();\n    }\n  }, {\n    key: \"setEffects\",\n    value: function setEffects() {\n      var effects = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.cleanup();\n      this.effects = effects;\n\n      this._createInternalEffects();\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.effects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var effect = _step.value;\n          effect.cleanup();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this._internalEffects[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _effect = _step2.value;\n\n          _effect.cleanup();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.effects.length = 0;\n      this._internalEffects.length = 0;\n    }\n  }, {\n    key: \"_createInternalEffects\",\n    value: function _createInternalEffects() {\n      this._internalEffects = this.effects.slice();\n\n      if (!this.effects.some(function (effect) {\n        return effect instanceof LightingEffect;\n      })) {\n        this._internalEffects.push(DEFAULT_LIGHTING_EFFECT);\n      }\n    }\n  }]);\n\n  return EffectManager;\n}();\n\nexport { EffectManager as default };","map":null,"metadata":{},"sourceType":"module"}