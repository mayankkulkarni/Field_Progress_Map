{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { createIterable } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport vs from './multi-icon-layer-vertex.glsl';\nimport fs from './multi-icon-layer-fragment.glsl';\nvar DEFAULT_GAMMA = 0.2;\nvar DEFAULT_BUFFER = 192.0 / 256;\nvar defaultProps = {\n  getRowSize: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.rowSize || [0, 0];\n    }\n  },\n  getOffsets: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.offsets || [0, 0];\n    }\n  },\n  getParagraphSize: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.size || [1, 1];\n    }\n  },\n  getAnchorX: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.anchorX || 0;\n    }\n  },\n  getAnchorY: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.anchorY || 0;\n    }\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getPickingIndex: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.objectIndex;\n    }\n  }\n};\n\nvar MultiIconLayer = function (_IconLayer) {\n  _inherits(MultiIconLayer, _IconLayer);\n\n  function MultiIconLayer() {\n    _classCallCheck(this, MultiIconLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MultiIconLayer).apply(this, arguments));\n  }\n\n  _createClass(MultiIconLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return Object.assign({}, _get(_getPrototypeOf(MultiIconLayer.prototype), \"getShaders\", this).call(this), {\n        vs: vs,\n        fs: fs\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"initializeState\", this).call(this);\n\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceOffsets: {\n          size: 2,\n          accessor: ['getIcon', 'getAnchorX', 'getAnchorY'],\n          update: this.calculateInstanceOffsets\n        },\n        instancePixelOffset: {\n          size: 2,\n          transition: true,\n          accessor: 'getPixelOffset'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(updateParams) {\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"updateState\", this).call(this, updateParams);\n\n      var changeFlags = updateParams.changeFlags;\n\n      if (changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.getAnchorX || changeFlags.updateTriggersChanged.getAnchorY)) {\n        this.getAttributeManager().invalidate('instanceOffsets');\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var sdf = this.props.sdf;\n\n      _get(_getPrototypeOf(MultiIconLayer.prototype), \"draw\", this).call(this, {\n        uniforms: Object.assign({}, uniforms, {\n          buffer: DEFAULT_BUFFER,\n          gamma: DEFAULT_GAMMA,\n          sdf: Boolean(sdf)\n        })\n      });\n    }\n  }, {\n    key: \"calculateInstanceOffsets\",\n    value: function calculateInstanceOffsets(attribute, _ref2) {\n      var startRow = _ref2.startRow,\n          endRow = _ref2.endRow;\n      var _this$props = this.props,\n          data = _this$props.data,\n          iconMapping = _this$props.iconMapping,\n          getIcon = _this$props.getIcon,\n          getAnchorX = _this$props.getAnchorX,\n          getAnchorY = _this$props.getAnchorY,\n          getParagraphSize = _this$props.getParagraphSize,\n          getRowSize = _this$props.getRowSize,\n          getOffsets = _this$props.getOffsets;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = startRow * size;\n\n      var _createIterable = createIterable(data, startRow, endRow),\n          iterable = _createIterable.iterable;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          var icon = getIcon(object);\n          var rect = iconMapping[icon] || {};\n\n          var _getParagraphSize = getParagraphSize(object),\n              _getParagraphSize2 = _slicedToArray(_getParagraphSize, 2),\n              width = _getParagraphSize2[0],\n              height = _getParagraphSize2[1];\n\n          var _getRowSize = getRowSize(object),\n              _getRowSize2 = _slicedToArray(_getRowSize, 1),\n              rowWidth = _getRowSize2[0];\n\n          var _getOffsets = getOffsets(object),\n              _getOffsets2 = _slicedToArray(_getOffsets, 2),\n              offsetX = _getOffsets2[0],\n              offsetY = _getOffsets2[1];\n\n          var anchorX = getAnchorX(object);\n          var anchorY = getAnchorY(object);\n          var rowOffset = (1 - anchorX) * (width - rowWidth) / 2;\n          value[i++] = (anchorX - 1) * width / 2 + rowOffset + rect.width / 2 + offsetX || 0;\n          value[i++] = (anchorY - 1) * height / 2 + rect.height / 2 + offsetY || 0;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"calculateInstancePickingColors\",\n    value: function calculateInstancePickingColors(attribute, _ref3) {\n      var startRow = _ref3.startRow,\n          endRow = _ref3.endRow;\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          getPickingIndex = _this$props2.getPickingIndex;\n      var value = attribute.value,\n          size = attribute.size;\n      var i = startRow * size;\n      var pickingColor = [];\n\n      var _createIterable2 = createIterable(data, startRow, endRow),\n          iterable = _createIterable2.iterable;\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = iterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var point = _step2.value;\n          var index = getPickingIndex(point);\n          this.encodePickingColor(index, pickingColor);\n          value[i++] = pickingColor[0];\n          value[i++] = pickingColor[1];\n          value[i++] = pickingColor[2];\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }]);\n\n  return MultiIconLayer;\n}(IconLayer);\n\nexport { MultiIconLayer as default };\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}