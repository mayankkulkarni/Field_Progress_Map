{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _MODULE_INJECTORS;\n\nimport { MODULE_INJECTORS_VS, MODULE_INJECTORS_FS } from '../modules/module-injectors';\nimport { VERTEX_SHADER, FRAGMENT_SHADER } from './constants';\nimport { assert } from '../utils';\nvar MODULE_INJECTORS = (_MODULE_INJECTORS = {}, _defineProperty(_MODULE_INJECTORS, VERTEX_SHADER, MODULE_INJECTORS_VS), _defineProperty(_MODULE_INJECTORS, FRAGMENT_SHADER, MODULE_INJECTORS_FS), _MODULE_INJECTORS);\nexport var DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';\nvar REGEX_START_OF_MAIN = /void main\\s*\\([^)]*\\)\\s*\\{\\n?/;\nvar REGEX_END_OF_MAIN = /}\\n?[^{}]*$/;\nvar fragments = [];\nexport default function injectShader(source, type, inject, injectStandardStubs) {\n  var isVertex = type === VERTEX_SHADER;\n\n  var _loop = function _loop(key) {\n    var fragmentData = inject[key];\n    fragmentData.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    fragments.length = fragmentData.length;\n\n    for (var i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n\n    var fragmentString = \"\".concat(fragments.join('\\n'), \"\\n\");\n\n    switch (key) {\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n\n        break;\n\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, function (match) {\n            return match + fragmentString;\n          });\n        }\n\n        break;\n\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, function (match) {\n            return fragmentString + match;\n          });\n        }\n\n        break;\n\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n\n        break;\n\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, function (match) {\n            return match + fragmentString;\n          });\n        }\n\n        break;\n\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, function (match) {\n            return fragmentString + match;\n          });\n        }\n\n        break;\n\n      default:\n        source = source.replace(key, function (match) {\n          return match + fragmentString;\n        });\n    }\n  };\n\n  for (var key in inject) {\n    _loop(key);\n  }\n\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, function (match) {\n      return match + MODULE_INJECTORS[type];\n    });\n  }\n\n  return source;\n}\nexport function combineInjects(injects) {\n  var result = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(function (inject) {\n    for (var key in inject) {\n      result[key] = result[key] ? \"\".concat(result[key], \"\\n\").concat(inject[key]) : inject[key];\n    }\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}