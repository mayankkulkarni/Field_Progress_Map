{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport { PhongMaterial } from '@luma.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport { replaceInRange } from '../utils';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultMaterial = new PhongMaterial();\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  elevationScale: 1,\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0,\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineDashJustified: false,\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getLineDashArray: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: defaultMaterial\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nvar GeoJsonLayer = function (_CompositeLayer) {\n  _inherits(GeoJsonLayer, _CompositeLayer);\n\n  function GeoJsonLayer() {\n    _classCallCheck(this, GeoJsonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GeoJsonLayer).apply(this, arguments));\n  }\n\n  _createClass(GeoJsonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        features: {}\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          changeFlags = _ref.changeFlags;\n\n      if (!changeFlags.dataChanged) {\n        return;\n      }\n\n      var features = getGeojsonFeatures(props.data);\n      var wrapFeature = this.getSubLayerRow.bind(this);\n\n      if (Array.isArray(changeFlags.dataChanged)) {\n        var oldFeatures = this.state.features;\n        var newFeatures = {};\n        var featuresDiff = {};\n\n        for (var key in oldFeatures) {\n          newFeatures[key] = oldFeatures[key].slice();\n          featuresDiff[key] = [];\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = changeFlags.dataChanged[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var dataRange = _step.value;\n            var partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n\n            for (var _key in oldFeatures) {\n              featuresDiff[_key].push(replaceInRange({\n                data: newFeatures[_key],\n                getIndex: function getIndex(f) {\n                  return f.__source.index;\n                },\n                dataRange: dataRange,\n                replace: partialFeatures[_key]\n              }));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.setState({\n          features: newFeatures,\n          featuresDiff: featuresDiff\n        });\n      } else {\n        this.setState({\n          features: separateGeojsonFeatures(features, wrapFeature),\n          featuresDiff: {}\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state = this.state,\n          features = _this$state.features,\n          featuresDiff = _this$state.featuresDiff;\n      var pointFeatures = features.pointFeatures,\n          lineFeatures = features.lineFeatures,\n          polygonFeatures = features.polygonFeatures,\n          polygonOutlineFeatures = features.polygonOutlineFeatures;\n      var _this$props = this.props,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var _this$props2 = this.props,\n          lineWidthUnits = _this$props2.lineWidthUnits,\n          lineWidthScale = _this$props2.lineWidthScale,\n          lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n          lineJointRounded = _this$props2.lineJointRounded,\n          lineMiterLimit = _this$props2.lineMiterLimit,\n          pointRadiusScale = _this$props2.pointRadiusScale,\n          pointRadiusMinPixels = _this$props2.pointRadiusMinPixels,\n          pointRadiusMaxPixels = _this$props2.pointRadiusMaxPixels,\n          elevationScale = _this$props2.elevationScale,\n          lineDashJustified = _this$props2.lineDashJustified;\n      var _this$props3 = this.props,\n          getLineColor = _this$props3.getLineColor,\n          getFillColor = _this$props3.getFillColor,\n          getRadius = _this$props3.getRadius,\n          getLineWidth = _this$props3.getLineWidth,\n          getLineDashArray = _this$props3.getLineDashArray,\n          getElevation = _this$props3.getElevation,\n          updateTriggers = _this$props3.updateTriggers;\n      var PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n      var PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n      var LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n      var PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n      var polygonFillLayer = this.shouldRenderSubLayer('polygons-fill', polygonFeatures) && new PolygonFillLayer({\n        _dataDiff: featuresDiff.polygonFeatures && function () {\n          return featuresDiff.polygonFeatures;\n        },\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        material: material,\n        getElevation: this.getSubLayerAccessor(getElevation),\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        transitions: transitions && {\n          getPolygon: transitions.geometry,\n          getElevation: transitions.getElevation,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-fill',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: polygonFeatures,\n        getPolygon: getCoordinates\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) && new PolygonStrokeLayer({\n        _dataDiff: featuresDiff.polygonOutlineFeatures && function () {\n          return featuresDiff.polygonOutlineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-stroke',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: polygonOutlineFeatures,\n        getPath: getCoordinates\n      });\n      var pathLayer = this.shouldRenderSubLayer('linestrings', lineFeatures) && new LineStringsLayer({\n        _dataDiff: featuresDiff.lineFeatures && function () {\n          return featuresDiff.lineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'line-strings',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: lineFeatures,\n        getPath: getCoordinates\n      });\n      var pointLayer = this.shouldRenderSubLayer('points', pointFeatures) && new PointsLayer({\n        _dataDiff: featuresDiff.pointFeatures && function () {\n          return featuresDiff.pointFeatures;\n        },\n        stroked: stroked,\n        filled: filled,\n        radiusScale: pointRadiusScale,\n        radiusMinPixels: pointRadiusMinPixels,\n        radiusMaxPixels: pointRadiusMaxPixels,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getRadius: this.getSubLayerAccessor(getRadius),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        transitions: transitions && {\n          getPosition: transitions.geometry,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor,\n          getRadius: transitions.getRadius,\n          getLineWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'points',\n        updateTriggers: {\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getRadius: updateTriggers.getRadius,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }), {\n        data: pointFeatures,\n        getPosition: getCoordinates\n      });\n      return [!extruded && polygonFillLayer, polygonLineLayer, pathLayer, pointLayer, extruded && polygonFillLayer];\n    }\n  }]);\n\n  return GeoJsonLayer;\n}(CompositeLayer);\n\nexport { GeoJsonLayer as default };\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}