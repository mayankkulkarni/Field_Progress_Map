{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from '../utils/assert';\nimport { isLoaderObject } from './loader-utils/normalize-loader';\nimport { mergeLoaderAndUserOptions } from './loader-utils/normalize-options';\nimport { getUrlFromData } from './loader-utils/get-data';\nimport { getArrayBufferOrStringFromData } from './loader-utils/get-data';\nimport { getLoaderContext } from './loader-utils/get-loader-context';\nimport parseWithWorker from './loader-utils/parse-with-worker';\nimport { selectLoader } from './select-loader';\nexport function parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, url) {\n    var autoUrl, loader, context;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              url = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            options = options || {};\n            autoUrl = getUrlFromData(data, url);\n            loader = selectLoader(loaders, autoUrl, data);\n            options = mergeLoaderAndUserOptions(options, loader);\n            context = getLoaderContext({\n              url: autoUrl,\n              parse: parse\n            }, options);\n            _context.next = 8;\n            return parseWithLoader(loader, data, options, context);\n\n          case 8:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction parseWithLoader(_x5, _x6, _x7, _x8) {\n  return _parseWithLoader.apply(this, arguments);\n}\n\nfunction _parseWithLoader() {\n  _parseWithLoader = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(loader, data, options, context) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getArrayBufferOrStringFromData(data, loader);\n\n          case 2:\n            data = _context2.sent;\n\n            if (!(loader.parseTextSync && typeof data === 'string')) {\n              _context2.next = 6;\n              break;\n            }\n\n            options.dataType = 'text';\n            return _context2.abrupt(\"return\", loader.parseTextSync(data, options, context, loader));\n\n          case 6:\n            if (!loader.parse) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 9;\n            return loader.parse(data, options, context, loader);\n\n          case 9:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 10:\n            if (!loader.parseSync) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", loader.parseSync(data, options, context, loader));\n\n          case 12:\n            if (!loader.worker) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.next = 15;\n            return parseWithWorker(loader.worker, loader.name, data, options, context, loader);\n\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 16:\n            return _context2.abrupt(\"return\", assert(false));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseWithLoader.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}