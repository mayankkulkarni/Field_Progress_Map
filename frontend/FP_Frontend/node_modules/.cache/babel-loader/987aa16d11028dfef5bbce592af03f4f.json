{"ast":null,"code":"import assert from '../../utils/assert';\nimport { getAccessorArrayTypeAndLength } from '../../gltf-utils/gltf-utils';\nexport default function unpackGLBBuffers(arrayBuffer, json, binaryByteOffset) {\n  if (binaryByteOffset) {\n    arrayBuffer = getArrayBufferAtOffset(arrayBuffer, binaryByteOffset);\n  }\n\n  var bufferViews = json.bufferViews || [];\n\n  for (var i = 0; i < bufferViews.length; ++i) {\n    var bufferView = bufferViews[i];\n    assert(bufferView.byteLength >= 0);\n  }\n\n  return {\n    accessors: unpackAccessors(arrayBuffer, bufferViews, json),\n    images: unpackImages(arrayBuffer, bufferViews, json)\n  };\n}\n\nfunction unpackAccessors(arrayBuffer, bufferViews, json) {\n  var accessors = json.accessors || [];\n  var accessorBuffers = [];\n\n  for (var i = 0; i < accessors.length; ++i) {\n    var accessor = accessors[i];\n    assert(accessor);\n    var bufferView = bufferViews[accessor.bufferView];\n\n    if (bufferView) {\n      var _getAccessorArrayType = getAccessorArrayTypeAndLength(accessor, bufferView),\n          ArrayType = _getAccessorArrayType.ArrayType,\n          length = _getAccessorArrayType.length;\n\n      var array = new ArrayType(arrayBuffer, bufferView.byteOffset, length);\n      array.accessor = accessor;\n      accessorBuffers.push(array);\n    }\n  }\n\n  return accessorBuffers;\n}\n\nfunction unpackImages(arrayBuffer, bufferViews, json) {\n  var images = json.images || [];\n  var imageBuffers = [];\n\n  for (var i = 0; i < images.length; ++i) {\n    var image = images[i];\n    assert(image);\n    var bufferView = bufferViews[image.bufferView];\n    assert(bufferView);\n    var array = new Uint8Array(arrayBuffer, bufferView.byteOffset, bufferView.byteLength);\n    array.imate = image;\n    imageBuffers.push(array);\n  }\n\n  return imageBuffers;\n}\n\nfunction getArrayBufferAtOffset(arrayBuffer, byteOffset) {\n  var length = arrayBuffer.byteLength - byteOffset;\n  var binaryBuffer = new ArrayBuffer(length);\n  var sourceArray = new Uint8Array(arrayBuffer);\n  var binaryArray = new Uint8Array(binaryBuffer);\n\n  for (var i = 0; i < length; i++) {\n    binaryArray[i] = sourceArray[byteOffset + i];\n  }\n\n  return binaryBuffer;\n}","map":null,"metadata":{},"sourceType":"module"}