{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray } from '@luma.gl/core';\nimport { padBuffer, getAttributeTypeFromSize, getSourceBufferAttribute, getAttributeBufferLength, cycleBuffers } from '../lib/attribute-transition-utils';\nimport Attribute from '../lib/attribute';\nimport Transition from './transition';\n\nvar GPUSpringTransition = function () {\n  function GPUSpringTransition(_ref) {\n    var gl = _ref.gl,\n        attribute = _ref.attribute,\n        timeline = _ref.timeline;\n\n    _classCallCheck(this, GPUSpringTransition);\n\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = new Attribute(gl, attribute.userData);\n    this.currentBufferLayout = attribute.bufferLayout;\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    var bufferOpts = {\n      byteLength: 0,\n      usage: 35050\n    };\n    this.buffers = [new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts)];\n  }\n\n  _createClass(GPUSpringTransition, [{\n    key: \"start\",\n    value: function start(transitionSettings, numInstances) {\n      var gl = this.gl,\n          buffers = this.buffers,\n          attribute = this.attribute;\n      var padBufferOpts = {\n        numInstances: numInstances,\n        attribute: attribute,\n        fromLength: this.currentLength,\n        fromBufferLayout: this.currentBufferLayout,\n        getData: transitionSettings.enter\n      };\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = buffers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var buffer = _step.value;\n          padBuffer(_objectSpread({\n            buffer: buffer\n          }, padBufferOpts));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.currentBufferLayout = attribute.bufferLayout;\n      this.currentLength = getAttributeBufferLength(attribute, numInstances);\n      this.attributeInTransition.update({\n        buffer: buffers[1],\n        value: attribute.value\n      });\n      this.transition.start(transitionSettings);\n      this.transform.update({\n        elementCount: Math.floor(this.currentLength / attribute.size),\n        sourceBuffers: {\n          aTo: getSourceBufferAttribute(gl, attribute)\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var buffers = this.buffers,\n          transform = this.transform,\n          framebuffer = this.framebuffer,\n          transition = this.transition;\n      var updated = transition.update();\n\n      if (!updated) {\n        return false;\n      }\n\n      transform.update({\n        sourceBuffers: {\n          aPrev: buffers[0],\n          aCur: buffers[1]\n        },\n        feedbackBuffers: {\n          vNext: buffers[2]\n        }\n      });\n      transform.run({\n        framebuffer: framebuffer,\n        discard: false,\n        clearRenderTarget: true,\n        uniforms: {\n          stiffness: transition.settings.stiffness,\n          damping: transition.settings.damping\n        },\n        parameters: {\n          depthTest: false,\n          blend: true,\n          viewport: [0, 0, 1, 1],\n          blendFunc: [1, 1],\n          blendEquation: [32776, 32776]\n        }\n      });\n      cycleBuffers(buffers);\n      this.attributeInTransition.update({\n        buffer: buffers[1]\n      });\n      var isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n      if (!isTransitioning) {\n        transition.end();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.transition.cancel();\n      this.transform[\"delete\"]();\n\n      while (this.buffers.length) {\n        this.buffers.pop()[\"delete\"]();\n      }\n\n      this.texture[\"delete\"]();\n      this.texture = null;\n      this.framebuffer[\"delete\"]();\n      this.framebuffer = null;\n    }\n  }, {\n    key: \"inProgress\",\n    get: function get() {\n      return this.transition.inProgress;\n    }\n  }]);\n\n  return GPUSpringTransition;\n}();\n\nexport { GPUSpringTransition as default };\n\nfunction getTransform(gl, attribute, framebuffer) {\n  var attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer: framebuffer,\n    vs: \"\\n#define SHADER_NAME spring-transition-vertex-shader\\n\\n#define EPSILON 0.00001\\n\\nuniform float stiffness;\\nuniform float damping;\\nattribute ATTRIBUTE_TYPE aPrev;\\nattribute ATTRIBUTE_TYPE aCur;\\nattribute ATTRIBUTE_TYPE aTo;\\nvarying ATTRIBUTE_TYPE vNext;\\nvarying float vIsTransitioningFlag;\\n\\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\\n  ATTRIBUTE_TYPE velocity = cur - prev;\\n  ATTRIBUTE_TYPE delta = dest - cur;\\n  ATTRIBUTE_TYPE spring = delta * stiffness;\\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\\n  return spring + damper + velocity + cur;\\n}\\n\\nvoid main(void) {\\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\\n\\n  vNext = getNextValue(aCur, aPrev, aTo);\\n  gl_Position = vec4(0, 0, 0, 1);\\n  gl_PointSize = 100.0;\\n}\\n\",\n    fs: \"\\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\\n\\nvarying float vIsTransitioningFlag;\\n\\nvoid main(void) {\\n  if (vIsTransitioningFlag == 0.0) {\\n    discard;\\n  }\\n  gl_FragColor = vec4(1.0);\\n}\",\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: 6408,\n    type: 5121,\n    border: 0,\n    mipmaps: false,\n    dataFormat: 6408,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: _defineProperty({}, 36064, texture)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}