{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { mimeTypeMap } from './image-parsers';\nvar ERR_INVALID_MIME_TYPE = \"Invalid MIME type. Supported MIME types are: \".concat(Array.from(mimeTypeMap.keys()).join(', '));\nexport function isImage(arrayBuffer, mimeType) {\n  if (mimeType) {\n    var _getImageTypeHandlers = getImageTypeHandlers(mimeType),\n        test = _getImageTypeHandlers.test;\n\n    var dataView = toDataView(arrayBuffer);\n    return test(dataView);\n  }\n\n  return Boolean(getImageMIMEType(arrayBuffer));\n}\nexport function getImageMIMEType(arrayBuffer) {\n  var dataView = toDataView(arrayBuffer);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = mimeTypeMap.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          mimeType = _step$value[0],\n          test = _step$value[1].test;\n\n      if (test(dataView)) {\n        return mimeType;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\nexport function getImageSize(arrayBuffer) {\n  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  mimeType = mimeType || getImageMIMEType(arrayBuffer);\n\n  var _getImageTypeHandlers2 = getImageTypeHandlers(mimeType),\n      getSize = _getImageTypeHandlers2.getSize;\n\n  var dataView = toDataView(arrayBuffer);\n  var size = getSize(dataView);\n\n  if (!size) {\n    throw new Error(\"invalid image data for type: \".concat(mimeType));\n  }\n\n  return size;\n}\nexport function getImageMetadata(arrayBuffer) {\n  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  mimeType = mimeType || getImageMIMEType(arrayBuffer);\n  var metadata = getImageSize(arrayBuffer, mimeType);\n  metadata.mimeType = mimeType;\n  return metadata;\n}\n\nfunction getImageTypeHandlers(mimeType) {\n  var handlers = mimeTypeMap.get(mimeType);\n\n  if (!handlers) {\n    throw new Error(ERR_INVALID_MIME_TYPE);\n  }\n\n  return handlers;\n}\n\nfunction toDataView(data) {\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer || data);\n  }\n\n  throw new Error('toDataView');\n}","map":null,"metadata":{},"sourceType":"module"}