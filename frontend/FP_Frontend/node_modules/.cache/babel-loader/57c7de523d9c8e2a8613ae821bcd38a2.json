{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { log } from '@deck.gl/core';\nimport { Geometry, uid } from '@luma.gl/core';\n\nvar ColumnGeometry = function (_Geometry) {\n  _inherits(ColumnGeometry, _Geometry);\n\n  function ColumnGeometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ColumnGeometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('column-geometry') : _props$id;\n\n    var _tesselateColumn = tesselateColumn(props),\n        indices = _tesselateColumn.indices,\n        attributes = _tesselateColumn.attributes;\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColumnGeometry).call(this, _objectSpread({}, props, {\n      id: id,\n      indices: indices,\n      attributes: attributes\n    })));\n  }\n\n  return ColumnGeometry;\n}(Geometry);\n\nexport { ColumnGeometry as default };\n\nfunction tesselateColumn(props) {\n  var radius = props.radius,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 1 : _props$height,\n      _props$nradial = props.nradial,\n      nradial = _props$nradial === void 0 ? 10 : _props$nradial,\n      vertices = props.vertices;\n  log.assert(!vertices || vertices.length >= nradial);\n  var vertsAroundEdge = nradial + 1;\n  var numVertices = vertsAroundEdge * 3;\n  var stepAngle = Math.PI * 2 / nradial;\n  var indices = new Uint16Array(nradial * 3 * 2);\n  var positions = new Float32Array(numVertices * 3);\n  var normals = new Float32Array(numVertices * 3);\n  var i = 0;\n\n  for (var j = 0; j < vertsAroundEdge; j++) {\n    var a = j * stepAngle;\n    var vertex = vertices && vertices[j % nradial];\n    var nextVertex = vertices && vertices[(j + 1) % nradial];\n    var sin = Math.sin(a);\n    var cos = Math.cos(a);\n\n    for (var k = 0; k < 2; k++) {\n      positions[i + 0] = vertex ? vertex[0] : cos * radius;\n      positions[i + 1] = vertex ? vertex[1] : sin * radius;\n      positions[i + 2] = (1 / 2 - k) * height;\n      normals[i + 0] = vertex ? nextVertex[0] - vertex[0] : cos;\n      normals[i + 1] = vertex ? nextVertex[1] - vertex[1] : sin;\n      i += 3;\n    }\n  }\n\n  for (var _j = 0; _j < vertsAroundEdge; _j++) {\n    var v = Math.floor(_j / 2) * Math.sign(_j % 2 - 0.5);\n\n    var _a = v * stepAngle;\n\n    var _vertex = vertices && vertices[(v + nradial) % nradial];\n\n    var _sin = Math.sin(_a);\n\n    var _cos = Math.cos(_a);\n\n    positions[i + 0] = _vertex ? _vertex[0] : _cos * radius;\n    positions[i + 1] = _vertex ? _vertex[1] : _sin * radius;\n    positions[i + 2] = height / 2;\n    normals[i + 2] = 1;\n    i += 3;\n  }\n\n  var index = 0;\n\n  for (var _j2 = 0; _j2 < nradial; _j2++) {\n    indices[index++] = _j2 * 2 + 0;\n    indices[index++] = _j2 * 2 + 2;\n    indices[index++] = _j2 * 2 + 0;\n    indices[index++] = _j2 * 2 + 1;\n    indices[index++] = _j2 * 2 + 1;\n    indices[index++] = _j2 * 2 + 3;\n  }\n\n  return {\n    indices: indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      }\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}