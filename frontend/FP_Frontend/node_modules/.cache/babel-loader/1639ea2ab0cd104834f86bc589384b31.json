{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport function getErrorMessageFromResponseSync(response) {\n  return \"Failed to fetch resource \".concat(response.url, \"(\").concat(response.status, \"): \").concat(response.statusText, \" \");\n}\nexport function getErrorMessageFromResponse(_x) {\n  return _getErrorMessageFromResponse.apply(this, arguments);\n}\n\nfunction _getErrorMessageFromResponse() {\n  _getErrorMessageFromResponse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(response) {\n    var message, contentType;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = \"Failed to fetch resource \".concat(response.url, \" (\").concat(response.status, \"): \");\n            _context.prev = 1;\n            contentType = response.headers.get('Content-Type');\n\n            if (!contentType.includes('application/json')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.t0 = message;\n            _context.next = 7;\n            return response.text();\n\n          case 7:\n            message = _context.t0 += _context.sent;\n            _context.next = 11;\n            break;\n\n          case 10:\n            message += response.statusText;\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t1 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", message);\n\n          case 16:\n            return _context.abrupt(\"return\", message);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n  return _getErrorMessageFromResponse.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}