{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { flattenToTypedArray } from './flatten-to-typed-array';\nexport default function packBinaryJson(json, glbBuilder) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _options$flattenArray = options.flattenArrays,\n      flattenArrays = _options$flattenArray === void 0 ? false : _options$flattenArray;\n  var object = json;\n\n  if (typeof object === 'string' && object.indexOf('#/') === 0) {\n    return \"#\".concat(object);\n  }\n\n  if (Array.isArray(object)) {\n    var typedArray = flattenArrays && flattenToTypedArray(object);\n\n    if (typedArray) {\n      object = typedArray;\n    } else {\n      return object.map(function (element) {\n        return packBinaryJson(element, glbBuilder, options);\n      });\n    }\n  }\n\n  if (ArrayBuffer.isView(object) && glbBuilder) {\n    if (glbBuilder.isImage(object)) {\n      var imageIndex = glbBuilder.addImage(object);\n      return \"#/images/\".concat(imageIndex);\n    }\n\n    var bufferIndex = glbBuilder.addBuffer(object);\n    return \"#/accessors/\".concat(bufferIndex);\n  }\n\n  if (object !== null && _typeof(object) === 'object') {\n    var newObject = {};\n\n    for (var key in object) {\n      newObject[key] = packBinaryJson(object[key], glbBuilder, options);\n    }\n\n    return newObject;\n  }\n\n  return object;\n}","map":null,"metadata":{},"sourceType":"module"}