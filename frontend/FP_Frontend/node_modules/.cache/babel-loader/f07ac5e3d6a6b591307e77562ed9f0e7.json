{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Transform } from '@luma.gl/core';\nimport GPUInterpolationTransition from '../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../transitions/gpu-spring-transition';\nimport log from '../utils/log';\nvar TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nvar AttributeTransitionManager = function () {\n  function AttributeTransitionManager(gl, _ref) {\n    var id = _ref.id,\n        timeline = _ref.timeline;\n\n    _classCallCheck(this, AttributeTransitionManager);\n\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else if (gl) {\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  _createClass(AttributeTransitionManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var attributeName in this.transitions) {\n        this._removeTransition(attributeName);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref2) {\n      var attributes = _ref2.attributes,\n          _ref2$transitions = _ref2.transitions,\n          transitions = _ref2$transitions === void 0 ? {} : _ref2$transitions,\n          numInstances = _ref2.numInstances;\n      this.numInstances = numInstances || 1;\n\n      if (!this.isSupported) {\n        return;\n      }\n\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        var settings = attribute.getTransitionSetting(transitions);\n        if (!settings) continue;\n\n        this._updateAttribute(attributeName, attribute, settings);\n      }\n\n      for (var _attributeName in this.transitions) {\n        var _attribute = attributes[_attributeName];\n\n        if (!_attribute || !_attribute.getTransitionSetting(transitions)) {\n          this._removeTransition(_attributeName);\n        }\n      }\n    }\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(attributeName) {\n      var transition = this.transitions[attributeName];\n      return transition && transition.inProgress;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      var animatedAttributes = {};\n\n      for (var attributeName in this.transitions) {\n        var transition = this.transitions[attributeName];\n\n        if (transition.inProgress) {\n          animatedAttributes[attributeName] = transition.attributeInTransition;\n        }\n      }\n\n      return animatedAttributes;\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      if (!this.isSupported || this.numInstances === 0) {\n        return false;\n      }\n\n      for (var attributeName in this.transitions) {\n        var updated = this.transitions[attributeName].update();\n\n        if (updated) {\n          this.needsRedraw = true;\n        }\n      }\n\n      var needsRedraw = this.needsRedraw;\n      this.needsRedraw = false;\n      return needsRedraw;\n    }\n  }, {\n    key: \"_removeTransition\",\n    value: function _removeTransition(attributeName) {\n      this.transitions[attributeName].cancel();\n      delete this.transitions[attributeName];\n    }\n  }, {\n    key: \"_updateAttribute\",\n    value: function _updateAttribute(attributeName, attribute, settings) {\n      var transition = this.transitions[attributeName];\n      var isNew = !transition || transition.type !== settings.type;\n\n      if (isNew) {\n        if (transition) {\n          this._removeTransition(attributeName);\n        }\n\n        var TransitionType = TRANSITION_TYPES[settings.type];\n\n        if (TransitionType) {\n          this.transitions[attributeName] = new TransitionType({\n            attribute: attribute,\n            timeline: this.timeline,\n            gl: this.gl\n          });\n        } else {\n          log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n          isNew = false;\n        }\n      }\n\n      if (isNew || attribute.needsRedraw()) {\n        this.needsRedraw = true;\n        this.transitions[attributeName].start(settings, this.numInstances);\n      }\n    }\n  }]);\n\n  return AttributeTransitionManager;\n}();\n\nexport { AttributeTransitionManager as default };","map":null,"metadata":{},"sourceType":"module"}