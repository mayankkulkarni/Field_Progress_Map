{"ast":null,"code":"import typedArrayManager from './typed-array-manager';\nimport { Vector3 } from 'math.gl';\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\nexport function extractCameraVectors(_ref) {\n  var viewMatrix = _ref.viewMatrix,\n      viewMatrixInverse = _ref.viewMatrixInverse;\n  return {\n    eye: [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]],\n    direction: [-viewMatrix[2], -viewMatrix[6], -viewMatrix[10]],\n    up: [viewMatrix[1], viewMatrix[5], viewMatrix[9]],\n    right: [viewMatrix[0], viewMatrix[4], viewMatrix[8]]\n  };\n}\nvar cameraPosition = new Vector3();\nvar cameraDirection = new Vector3();\nvar cameraUp = new Vector3();\nvar cameraRight = new Vector3();\nvar nearCenter = new Vector3();\nvar farCenter = new Vector3();\nvar a = new Vector3();\nexport function getFrustumPlanes(_ref2) {\n  var aspect = _ref2.aspect,\n      near = _ref2.near,\n      far = _ref2.far,\n      fovyRadians = _ref2.fovyRadians,\n      position = _ref2.position,\n      direction = _ref2.direction,\n      up = _ref2.up,\n      right = _ref2.right;\n  cameraDirection.copy(direction);\n  var nearFarScale = 1 / cameraDirection.len();\n  cameraDirection.normalize();\n  cameraPosition.copy(position);\n  cameraUp.copy(up).normalize();\n  cameraRight.copy(right).normalize();\n  var nearHeight = 2 * Math.tan(fovyRadians / 2) * near;\n  var nearWidth = nearHeight * aspect;\n  nearCenter.copy(cameraDirection).scale(near * nearFarScale).add(cameraPosition);\n  farCenter.copy(cameraDirection).scale(far * nearFarScale).add(cameraPosition);\n  var normal = cameraDirection.clone().negate();\n  var distance = normal.dot(nearCenter);\n  var planes = {\n    near: {\n      distance: distance,\n      normal: normal\n    },\n    far: {\n      distance: cameraDirection.dot(farCenter),\n      normal: cameraDirection.clone()\n    }\n  };\n  a.copy(cameraRight).scale(nearWidth * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new Vector3(cameraUp).cross(a);\n  distance = cameraPosition.dot(normal);\n  planes.right = {\n    normal: normal,\n    distance: distance\n  };\n  a.copy(cameraRight).scale(-nearWidth * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new Vector3(a).cross(cameraUp);\n  distance = cameraPosition.dot(normal);\n  planes.left = {\n    normal: normal,\n    distance: distance\n  };\n  a.copy(cameraUp).scale(nearHeight * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new Vector3(a).cross(cameraRight);\n  distance = cameraPosition.dot(normal);\n  planes.top = {\n    normal: normal,\n    distance: distance\n  };\n  a.copy(cameraUp).scale(-nearHeight * 0.5).add(nearCenter).subtract(cameraPosition).normalize();\n  normal = new Vector3(cameraRight).cross(a);\n  distance = cameraPosition.dot(normal);\n  planes.bottom = {\n    normal: normal,\n    distance: distance\n  };\n  return planes;\n}\nexport function fp64LowPart(x) {\n  return x - Math.fround(x);\n}\nvar scratchArray;\nexport function toDoublePrecisionArray(typedArray, _ref3) {\n  var _ref3$size = _ref3.size,\n      size = _ref3$size === void 0 ? 1 : _ref3$size,\n      _ref3$startIndex = _ref3.startIndex,\n      startIndex = _ref3$startIndex === void 0 ? 0 : _ref3$startIndex,\n      endIndex = _ref3.endIndex;\n\n  if (!Number.isFinite(endIndex)) {\n    endIndex = typedArray.length;\n  }\n\n  var count = (endIndex - startIndex) / size;\n  scratchArray = typedArrayManager.allocate(scratchArray, count, {\n    type: Float32Array,\n    size: size * 2\n  });\n  var sourceIndex = startIndex;\n  var targetIndex = 0;\n\n  while (sourceIndex < endIndex) {\n    for (var j = 0; j < size; j++) {\n      var value = typedArray[sourceIndex++];\n      scratchArray[targetIndex + j] = value;\n      scratchArray[targetIndex + j + size] = fp64LowPart(value);\n    }\n\n    targetIndex += size * 2;\n  }\n\n  return scratchArray.subarray(0, count * size * 2);\n}","map":null,"metadata":{},"sourceType":"module"}