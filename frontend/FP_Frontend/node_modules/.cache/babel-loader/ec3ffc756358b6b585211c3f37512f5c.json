{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport assert from '../utils/assert';\nimport parseGLBSync, { isGLB as _isGLB } from '../parse-glb';\nimport { ATTRIBUTE_TYPE_TO_COMPONENTS, ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE, ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY } from '../gltf-utils/gltf-utils';\nimport unpackBinaryJson from './packed-json/unpack-binary-json';\nimport unpackGLTFBuffers from './packed-json/unpack-gltf-buffers';\n\nvar GLBParser = function () {\n  function GLBParser() {\n    _classCallCheck(this, GLBParser);\n  }\n\n  _createClass(GLBParser, [{\n    key: \"parse\",\n    value: function parse(arrayBuffer) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.parseSync(arrayBuffer, options);\n    }\n  }, {\n    key: \"parseSync\",\n    value: function parseSync(arrayBuffer) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.glbArrayBuffer = arrayBuffer;\n      this.binaryByteOffset = null;\n      this.packedJson = null;\n      this.json = null;\n\n      if (this.json === null && this.binaryByteOffset === null) {\n        var byteOffset = 0;\n        parseGLBSync(this, this.glbArrayBuffer, byteOffset, options);\n        this.binaryByteOffset = this.binChunkByteOffset;\n        this.packedJson = this.json;\n        var unpackedBuffers = unpackGLTFBuffers(this.glbArrayBuffer, this.json, this.binaryByteOffset);\n        this.json = unpackBinaryJson(this.json, unpackedBuffers);\n        this.unpackedBuffers = unpackedBuffers;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getApplicationData\",\n    value: function getApplicationData(key) {\n      return this.json[key];\n    }\n  }, {\n    key: \"getJSON\",\n    value: function getJSON() {\n      return this.json;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer() {\n      return this.glbArrayBuffer;\n    }\n  }, {\n    key: \"getBinaryByteOffset\",\n    value: function getBinaryByteOffset() {\n      return this.binaryByteOffset;\n    }\n  }, {\n    key: \"getBufferView\",\n    value: function getBufferView(glTFBufferView) {\n      var byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;\n      return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(glTFAccessor) {\n      var ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];\n      var components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];\n      var bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];\n      var length = glTFAccessor.count * components;\n      var byteLength = glTFAccessor.count * components * bytesPerComponent;\n      var glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];\n      assert(byteLength >= 0 && glTFAccessor.byteOffset + byteLength <= glTFBufferView.byteLength);\n      var byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset + glTFAccessor.byteOffset;\n      return new ArrayType(this.glbArrayBuffer, byteOffset, length);\n    }\n  }, {\n    key: \"getImageData\",\n    value: function getImageData(glTFImage) {\n      return {\n        typedArray: this.getBufferView(glTFImage.bufferView),\n        mimeType: glTFImage.mimeType || 'image/jpeg'\n      };\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(glTFImage) {\n      var arrayBufferView = this.getBufferView(glTFImage.bufferView);\n      var mimeType = glTFImage.mimeType || 'image/jpeg';\n      var blob = new Blob([arrayBufferView], {\n        type: mimeType\n      });\n      var urlCreator = self.URL || self.webkitURL;\n      var imageUrl = urlCreator.createObjectURL(blob);\n      var img = new Image();\n      img.src = imageUrl;\n      return img;\n    }\n  }, {\n    key: \"getImageAsync\",\n    value: function getImageAsync(glTFImage) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var arrayBufferView = _this.getBufferView(glTFImage.bufferView);\n\n        var mimeType = glTFImage.mimeType || 'image/jpeg';\n        var blob = new Blob([arrayBufferView], {\n          type: mimeType\n        });\n        var urlCreator = self.URL || self.webkitURL;\n        var imageUrl = urlCreator.createObjectURL(blob);\n        var img = new Image();\n\n        img.onload = function () {\n          return resolve(img);\n        };\n\n        img.src = imageUrl;\n      });\n    }\n  }], [{\n    key: \"isGLB\",\n    value: function isGLB(arrayBuffer) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var byteOffset = 0;\n      return _isGLB(arrayBuffer, byteOffset);\n    }\n  }]);\n\n  return GLBParser;\n}();\n\nexport { GLBParser as default };","map":null,"metadata":{},"sourceType":"module"}