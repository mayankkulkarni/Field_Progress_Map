{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { normalizeTransitionSettings } from './attribute-transition-utils';\nimport CPUInterpolationTransition from '../transitions/cpu-interpolation-transition';\nimport CPUSpringTransition from '../transitions/cpu-spring-transition';\nimport log from '../utils/log';\nvar TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\n\nvar UniformTransitionManager = function () {\n  function UniformTransitionManager(timeline) {\n    _classCallCheck(this, UniformTransitionManager);\n\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n\n  _createClass(UniformTransitionManager, [{\n    key: \"add\",\n    value: function add(key, fromValue, toValue, settings) {\n      var transitions = this.transitions;\n\n      if (transitions.has(key)) {\n        var _transition = transitions.get(key);\n\n        fromValue = _transition.value;\n        this.remove(key);\n      }\n\n      settings = normalizeTransitionSettings(settings);\n\n      if (!settings) {\n        return;\n      }\n\n      var TransitionType = TRANSITION_TYPES[settings.type];\n\n      if (!TransitionType) {\n        log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n        return;\n      }\n\n      var transition = new TransitionType(this.timeline);\n      transition.start(_objectSpread({}, settings, {\n        fromValue: fromValue,\n        toValue: toValue\n      }));\n      transitions.set(key, transition);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var transitions = this.transitions;\n\n      if (transitions.has(key)) {\n        transitions.get(key).cancel();\n        transitions[\"delete\"](key);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var propsInTransition = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.transitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              transition = _step$value[1];\n\n          transition.update();\n          propsInTransition[key] = transition.value;\n\n          if (!transition.inProgress) {\n            this.remove(key);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return propsInTransition;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.transitions.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var key = _step2.value;\n          this.remove(key);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this.transitions.size > 0;\n    }\n  }]);\n\n  return UniformTransitionManager;\n}();\n\nexport { UniformTransitionManager as default };","map":null,"metadata":{},"sourceType":"module"}