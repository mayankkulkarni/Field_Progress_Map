{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isFetchResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isFileReadable } from '../../javascript-utils/is-type';\nimport { getStreamIterator } from '../../javascript-utils/stream-utils';\nimport fetchFileReadable from '../fetch/fetch-file.browser';\nimport { checkFetchResponseStatus, checkFetchResponseStatusSync } from './check-errors';\nvar ERR_DATA = 'Cannot convert supplied data type';\nexport function getUrlFromData(data, url) {\n  if (isFetchResponse(data)) {\n    url = url || data.url;\n  } else if (isFileReadable(url)) {\n    url = url.name;\n  }\n\n  return typeof url === 'string' ? url.replace(/\\?.*/, '') : url;\n}\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    var arrayBuffer = data.buffer || data;\n\n    if (loader.text && !loader.binary) {\n      var textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\nexport function getArrayBufferOrStringFromData(_x, _x2) {\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nfunction _getArrayBufferOrStringFromData() {\n  _getArrayBufferOrStringFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader) {\n    var isArrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return data;\n\n          case 2:\n            data = _context2.sent;\n            isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n\n            if (!(typeof data === 'string' || isArrayBuffer)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", getArrayBufferOrStringFromDataSync(data, loader));\n\n          case 6:\n            if (!isFileReadable(data)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 9;\n            return fetchFileReadable(data);\n\n          case 9:\n            data = _context2.sent;\n\n          case 10:\n            if (!isFetchResponse(data)) {\n              _context2.next = 23;\n              break;\n            }\n\n            _context2.next = 13;\n            return checkFetchResponseStatus(data);\n\n          case 13:\n            if (!loader.binary) {\n              _context2.next = 19;\n              break;\n            }\n\n            _context2.next = 16;\n            return data.arrayBuffer();\n\n          case 16:\n            _context2.t0 = _context2.sent;\n            _context2.next = 22;\n            break;\n\n          case 19:\n            _context2.next = 21;\n            return data.text();\n\n          case 21:\n            _context2.t0 = _context2.sent;\n\n          case 22:\n            return _context2.abrupt(\"return\", _context2.t0);\n\n          case 23:\n            throw new Error(ERR_DATA);\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nexport function getAsyncIteratorFromData(data) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isFetchResponse(data) && data.body) {\n    checkFetchResponseStatusSync(data);\n    return getStreamIterator(data.body);\n  }\n\n  if (isReadableStream(data)) {\n    return getStreamIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data);\n}\nexport function getIteratorFromData(data) {\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return _regeneratorRuntime.mark(function oneChunk() {\n      return _regeneratorRuntime.wrap(function oneChunk$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return data.buffer || data;\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, oneChunk);\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}","map":null,"metadata":{},"sourceType":"module"}