{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nexport var TypedArrayManager = function () {\n  function TypedArrayManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$overAlloc = _ref.overAlloc,\n        overAlloc = _ref$overAlloc === void 0 ? 2 : _ref$overAlloc,\n        _ref$poolSize = _ref.poolSize,\n        poolSize = _ref$poolSize === void 0 ? 100 : _ref$poolSize;\n\n    _classCallCheck(this, TypedArrayManager);\n\n    this.overAlloc = overAlloc;\n    this.poolSize = poolSize;\n    this._pool = [];\n  }\n\n  _createClass(TypedArrayManager, [{\n    key: \"allocate\",\n    value: function allocate(typedArray, count, _ref2) {\n      var _ref2$size = _ref2.size,\n          size = _ref2$size === void 0 ? 1 : _ref2$size,\n          type = _ref2.type,\n          _ref2$padding = _ref2.padding,\n          padding = _ref2$padding === void 0 ? 0 : _ref2$padding,\n          _ref2$copy = _ref2.copy,\n          copy = _ref2$copy === void 0 ? false : _ref2$copy;\n      var Type = type || typedArray && typedArray.constructor || Float32Array;\n      var newSize = count * size + padding;\n\n      if (ArrayBuffer.isView(typedArray)) {\n        if (newSize <= typedArray.length) {\n          return typedArray;\n        }\n\n        if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n          return new Type(typedArray.buffer, 0, newSize);\n        }\n      }\n\n      var newArray = this._allocate(Type, newSize);\n\n      if (typedArray && copy) {\n        newArray.set(typedArray);\n      } else {\n        newArray.fill(0, 0, 4);\n      }\n\n      this._release(typedArray);\n\n      return newArray;\n    }\n  }, {\n    key: \"release\",\n    value: function release(typedArray) {\n      this._release(typedArray);\n    }\n  }, {\n    key: \"_allocate\",\n    value: function _allocate(Type, size) {\n      size = Math.max(Math.ceil(size * this.overAlloc), 1);\n      var pool = this._pool;\n      var byteLength = Type.BYTES_PER_ELEMENT * size;\n      var i = pool.findIndex(function (b) {\n        return b.byteLength >= byteLength;\n      });\n\n      if (i >= 0) {\n        return new Type(pool.splice(i, 1)[0], 0, size);\n      }\n\n      return new Type(size);\n    }\n  }, {\n    key: \"_release\",\n    value: function _release(typedArray) {\n      if (!ArrayBuffer.isView(typedArray)) {\n        return;\n      }\n\n      var pool = this._pool;\n      var buffer = typedArray.buffer;\n      var byteLength = buffer.byteLength;\n      var i = pool.findIndex(function (b) {\n        return b.byteLength >= byteLength;\n      });\n\n      if (i < 0) {\n        pool.push(buffer);\n      } else if (i > 0 || pool.length < this.poolSize) {\n        pool.splice(i, 0, buffer);\n      }\n\n      if (pool.length > this.poolSize) {\n        pool.shift();\n      }\n    }\n  }]);\n\n  return TypedArrayManager;\n}();\nexport default new TypedArrayManager();","map":null,"metadata":{},"sourceType":"module"}