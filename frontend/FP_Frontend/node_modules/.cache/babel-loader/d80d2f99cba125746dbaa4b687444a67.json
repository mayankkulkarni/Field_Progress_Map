{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_SAMPLER;\n\nimport { getFullUri } from '../gltf-utils/gltf-utils';\nvar COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nvar BYTES = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\nvar GL_SAMPLER = {\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\nvar SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\nvar DEFAULT_SAMPLER = (_DEFAULT_SAMPLER = {}, _defineProperty(_DEFAULT_SAMPLER, GL_SAMPLER.TEXTURE_MAG_FILTER, GL_SAMPLER.LINEAR), _defineProperty(_DEFAULT_SAMPLER, GL_SAMPLER.TEXTURE_MIN_FILTER, GL_SAMPLER.NEAREST_MIPMAP_LINEAR), _defineProperty(_DEFAULT_SAMPLER, GL_SAMPLER.TEXTURE_WRAP_S, GL_SAMPLER.REPEAT), _defineProperty(_DEFAULT_SAMPLER, GL_SAMPLER.TEXTURE_WRAP_, GL_SAMPLER.REPEAT), _DEFAULT_SAMPLER);\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nvar GLTFPostProcessorOld = function () {\n  function GLTFPostProcessorOld() {\n    _classCallCheck(this, GLTFPostProcessorOld);\n  }\n\n  _createClass(GLTFPostProcessorOld, [{\n    key: \"postProcess\",\n    value: function postProcess(gltf, glbParser) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.gltf = gltf;\n      this.glbParser = glbParser;\n\n      this._resolveToTree(options);\n\n      return this.gltf;\n    }\n  }, {\n    key: \"_resolveToTree\",\n    value: function _resolveToTree() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var gltf = this.gltf;\n      (gltf.bufferViews || []).forEach(function (bufView, i) {\n        return _this._resolveBufferView(bufView, i);\n      });\n      (gltf.images || []).forEach(function (image, i) {\n        return _this._resolveImage(image, i, options);\n      });\n      (gltf.samplers || []).forEach(function (sampler, i) {\n        return _this._resolveSampler(sampler, i);\n      });\n      (gltf.textures || []).forEach(function (texture, i) {\n        return _this._resolveTexture(texture, i);\n      });\n      (gltf.accessors || []).forEach(function (accessor, i) {\n        return _this._resolveAccessor(accessor, i);\n      });\n      (gltf.materials || []).forEach(function (material, i) {\n        return _this._resolveMaterial(material, i);\n      });\n      (gltf.meshes || []).forEach(function (mesh, i) {\n        return _this._resolveMesh(mesh, i);\n      });\n      (gltf.nodes || []).forEach(function (node, i) {\n        return _this._resolveNode(node, i);\n      });\n      (gltf.skins || []).forEach(function (skin, i) {\n        return _this._resolveSkin(skin, i);\n      });\n      (gltf.scenes || []).forEach(function (scene, i) {\n        return _this._resolveScene(scene, i);\n      });\n\n      if (gltf.scene !== undefined) {\n        gltf.scene = gltf.scenes[this.gltf.scene];\n      }\n\n      this._process_extension_KHR_lights_punctual();\n\n      return gltf;\n    }\n  }, {\n    key: \"getScene\",\n    value: function getScene(index) {\n      return this._get('scenes', index);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(index) {\n      return this._get('nodes', index);\n    }\n  }, {\n    key: \"getSkin\",\n    value: function getSkin(index) {\n      return this._get('skins', index);\n    }\n  }, {\n    key: \"getMesh\",\n    value: function getMesh(index) {\n      return this._get('meshes', index);\n    }\n  }, {\n    key: \"getMaterial\",\n    value: function getMaterial(index) {\n      return this._get('materials', index);\n    }\n  }, {\n    key: \"getAccessor\",\n    value: function getAccessor(index) {\n      return this._get('accessors', index);\n    }\n  }, {\n    key: \"getCamera\",\n    value: function getCamera(index) {\n      return null;\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(index) {\n      return this._get('textures', index);\n    }\n  }, {\n    key: \"getSampler\",\n    value: function getSampler(index) {\n      return this._get('samplers', index);\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(index) {\n      return this._get('images', index);\n    }\n  }, {\n    key: \"getBufferView\",\n    value: function getBufferView(index) {\n      return this._get('bufferViews', index);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(index) {\n      return this._get('buffers', index);\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(array, index) {\n      if (_typeof(index) === 'object') {\n        return index;\n      }\n\n      var object = this.gltf[array] && this.gltf[array][index];\n\n      if (!object) {\n        console.warn(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n      }\n\n      return object;\n    }\n  }, {\n    key: \"_resolveScene\",\n    value: function _resolveScene(scene, index) {\n      var _this2 = this;\n\n      scene.id = \"scene-\".concat(index);\n      scene.nodes = (scene.nodes || []).map(function (node) {\n        return _this2.getNode(node);\n      });\n    }\n  }, {\n    key: \"_resolveNode\",\n    value: function _resolveNode(node, index) {\n      var _this3 = this;\n\n      node.id = \"node-\".concat(index);\n      node.children = (node.children || []).map(function (child) {\n        return _this3.getNode(child);\n      });\n\n      if (node.mesh !== undefined) {\n        node.mesh = this.getMesh(node.mesh);\n      }\n\n      if (node.camera !== undefined) {\n        node.camera = this.getCamera(node.camera);\n      }\n\n      if (node.skin !== undefined) {\n        node.skin = this.getSkin(node.skin);\n      }\n    }\n  }, {\n    key: \"_resolveSkin\",\n    value: function _resolveSkin(skin, index) {\n      skin.id = \"skin-\".concat(index);\n      skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    }\n  }, {\n    key: \"_resolveMesh\",\n    value: function _resolveMesh(mesh, index) {\n      mesh.id = \"mesh-\".concat(index);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = mesh.primitives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var primitive = _step.value;\n\n          for (var attribute in primitive.attributes) {\n            primitive.attributes[attribute] = this.getAccessor(primitive.attributes[attribute]);\n          }\n\n          if (primitive.indices !== undefined) {\n            primitive.indices = this.getAccessor(primitive.indices);\n          }\n\n          if (primitive.material !== undefined) {\n            primitive.material = this.getMaterial(primitive.material);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_resolveMaterial\",\n    value: function _resolveMaterial(material, index) {\n      material.id = \"material-\".concat(index);\n\n      if (material.normalTexture) {\n        material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n      }\n\n      if (material.occlusionTexture) {\n        material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n      }\n\n      if (material.emissiveTexture) {\n        material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n      }\n\n      if (material.pbrMetallicRoughness) {\n        var mr = material.pbrMetallicRoughness;\n\n        if (mr.baseColorTexture) {\n          mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n        }\n\n        if (mr.metallicRoughnessTexture) {\n          mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n        }\n      }\n    }\n  }, {\n    key: \"_resolveAccessor\",\n    value: function _resolveAccessor(accessor, index) {\n      accessor.id = \"accessor-\".concat(index);\n\n      if (accessor.bufferView !== undefined) {\n        accessor.bufferView = this.getBufferView(accessor.bufferView);\n      }\n\n      accessor.bytesPerComponent = getBytesFromComponentType(accessor);\n      accessor.components = getSizeFromAccessorType(accessor);\n      accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n    }\n  }, {\n    key: \"_resolveTexture\",\n    value: function _resolveTexture(texture, index) {\n      texture.id = \"texture-\".concat(index);\n      texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n      texture.source = this.getImage(texture.source);\n    }\n  }, {\n    key: \"_resolveSampler\",\n    value: function _resolveSampler(sampler, index) {\n      sampler.id = \"sampler-\".concat(index);\n      sampler.parameters = {};\n\n      for (var key in sampler) {\n        var glEnum = this._enumSamplerParameter(key);\n\n        if (glEnum !== undefined) {\n          sampler.parameters[glEnum] = sampler[key];\n        }\n      }\n    }\n  }, {\n    key: \"_enumSamplerParameter\",\n    value: function _enumSamplerParameter(key) {\n      return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n    }\n  }, {\n    key: \"_resolveImage\",\n    value: function _resolveImage(image, index, options) {\n      var _this4 = this;\n\n      image.id = \"image-\".concat(index);\n\n      if (image.bufferView !== undefined) {\n        image.bufferView = this.getBufferView(image.bufferView);\n      }\n\n      var _options$createImages = options.createImages,\n          createImages = _options$createImages === void 0 ? true : _options$createImages;\n\n      if (createImages) {\n        image.image = this.glbParser.getImage(image);\n      } else {\n        image.getImageAsync = function () {\n          if (_this4.glbParser) {\n            return _this4.glbParser.getImageAsync(image);\n          } else if (image.uri) {\n            return new Promise(function (resolve) {\n              var img = new Image();\n              img.crossOrigin = 'anonymous';\n\n              img.onload = function () {\n                return resolve(img);\n              };\n\n              img.src = getFullUri(image.uri, options.uri);\n            });\n          }\n\n          return null;\n        };\n      }\n    }\n  }, {\n    key: \"_resolveBufferView\",\n    value: function _resolveBufferView(bufferView, index) {\n      bufferView.id = \"bufferView-\".concat(index);\n      bufferView.buffer = this.getBuffer(bufferView.buffer);\n\n      if (this.glbParser) {\n        bufferView.data = this.glbParser.getBufferView(bufferView);\n      } else {\n        var byteOffset = bufferView.byteOffset || 0;\n        bufferView.data = new Uint8Array(bufferView.buffer.data, byteOffset, bufferView.byteLength);\n      }\n    }\n  }, {\n    key: \"_resolveCamera\",\n    value: function _resolveCamera(camera) {\n      if (camera.perspective) {}\n\n      if (camera.orthographic) {}\n    }\n  }, {\n    key: \"_process_extension_KHR_lights_punctual\",\n    value: function _process_extension_KHR_lights_punctual() {\n      var gltf = this.gltf;\n      var extension = gltf.extensions && gltf.extensions.KHR_lights_punctual;\n\n      if (extension) {\n        gltf.lights = extension.lights;\n      }\n\n      this._removeExtension('KHR_lights_punctual');\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (gltf.nodes || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var node = _step2.value;\n          var nodeExtension = node.extensions && node.extensions.KHR_lights_punctual;\n\n          if (nodeExtension) {\n            node.light = this._get('lights', nodeExtension.light);\n            delete node.extensions.KHR_lights_punctual;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      delete gltf.lights;\n    }\n  }, {\n    key: \"_removeExtension\",\n    value: function _removeExtension(extensionName) {\n      if (this.gltf.extensionsRequired) {\n        this._removeStringFromArray(this.gltf.extensionsRequired, extensionName);\n      }\n\n      if (this.gltf.extensionsUsed) {\n        this._removeStringFromArray(this.gltf.extensionsUsed, extensionName);\n      }\n\n      if (this.gltf.extensions) {\n        delete this.gltf.extensions[extensionName];\n      }\n    }\n  }, {\n    key: \"_removeStringFromArray\",\n    value: function _removeStringFromArray(array, string) {\n      var found = true;\n\n      while (found) {\n        var index = array.indexOf(string);\n\n        if (index > -1) {\n          array.splice(index, 1);\n        } else {\n          found = false;\n        }\n      }\n    }\n  }]);\n\n  return GLTFPostProcessorOld;\n}();\n\nexport { GLTFPostProcessorOld as default };","map":null,"metadata":{},"sourceType":"module"}