{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport WorkerPool from './worker-pool';\nvar DEFAULT_MAX_CONCURRENCY = 5;\n\nvar WorkerFarm = function () {\n  function WorkerFarm(_ref) {\n    var _ref$maxConcurrency = _ref.maxConcurrency,\n        maxConcurrency = _ref$maxConcurrency === void 0 ? DEFAULT_MAX_CONCURRENCY : _ref$maxConcurrency,\n        onMessage = _ref.onMessage,\n        _ref$onDebug = _ref.onDebug,\n        onDebug = _ref$onDebug === void 0 ? function () {} : _ref$onDebug;\n\n    _classCallCheck(this, WorkerFarm);\n\n    this.maxConcurrency = maxConcurrency;\n    this.onMessage = onMessage;\n    this.onDebug = onDebug;\n    this.workerPools = new Map();\n  }\n\n  _createClass(WorkerFarm, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('maxConcurrency' in props) {\n        this.maxConcurrency = props.maxConcurrency;\n      }\n\n      if ('onDebug' in props) {\n        this.onDebug = props.onDebug;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.workerPools.forEach(function (workerPool) {\n        return workerPool.destroy();\n      });\n    }\n  }, {\n    key: \"process\",\n    value: function () {\n      var _process = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(workerSource, workerName, data) {\n        var workerPool;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                workerPool = this._getWorkerPool(workerSource, workerName);\n                return _context.abrupt(\"return\", workerPool.process(data));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function process(_x, _x2, _x3) {\n        return _process.apply(this, arguments);\n      }\n\n      return process;\n    }()\n  }, {\n    key: \"_getWorkerPool\",\n    value: function _getWorkerPool(workerSource, workerName) {\n      var workerPool = this.workerPools.get(workerName);\n\n      if (!workerPool) {\n        workerPool = new WorkerPool({\n          source: workerSource,\n          name: workerName,\n          onMessage: this.onMessage,\n          maxConcurrency: this.maxConcurrency,\n          onDebug: this.onDebug\n        });\n        this.workerPools.set(workerName, workerPool);\n      }\n\n      return workerPool;\n    }\n  }]);\n\n  return WorkerFarm;\n}();\n\nexport { WorkerFarm as default };","map":null,"metadata":{},"sourceType":"module"}