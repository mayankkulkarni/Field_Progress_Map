{"ast":null,"code":"export function replaceInRange(_ref) {\n  var data = _ref.data,\n      getIndex = _ref.getIndex,\n      dataRange = _ref.dataRange,\n      replace = _ref.replace;\n  var _dataRange$startRow = dataRange.startRow,\n      startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n      _dataRange$endRow = dataRange.endRow,\n      endRow = _dataRange$endRow === void 0 ? Infinity : _dataRange$endRow;\n  var count = data.length;\n  var replaceStart = count;\n  var replaceEnd = count;\n\n  for (var i = 0; i < count; i++) {\n    var row = getIndex(data[i]);\n\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n\n  var index = replaceStart;\n  var dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  var endChunk = dataLengthChanged && data.slice(replaceEnd);\n\n  for (var _i = 0; _i < replace.length; _i++) {\n    data[index++] = replace[_i];\n  }\n\n  if (dataLengthChanged) {\n    for (var _i2 = 0; _i2 < endChunk.length; _i2++) {\n      data[index++] = endChunk[_i2];\n    }\n\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}","map":null,"metadata":{},"sourceType":"module"}