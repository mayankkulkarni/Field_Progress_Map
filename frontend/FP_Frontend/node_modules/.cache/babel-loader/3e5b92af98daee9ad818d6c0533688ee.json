{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { assert } from '@luma.gl/core';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport createGLTFObjects from './create-gltf-objects';\n\nfunction parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, options, uri, loader) {\n    var gltf, gltfObjects;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(options.gl);\n            _context.next = 3;\n            return GLTFLoader.parse(data, _objectSpread({}, options, {\n              uri: uri,\n              decompress: true\n            }));\n\n          case 3:\n            gltf = _context.sent;\n            gltfObjects = createGLTFObjects(options.gl, gltf, options);\n\n            if (!options.waitForFullLoad) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 8;\n            return waitForGLTFAssets(gltfObjects);\n\n          case 8:\n            return _context.abrupt(\"return\", Object.assign({\n              gltf: gltf\n            }, gltfObjects));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction waitForGLTFAssets(_x5) {\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction _waitForGLTFAssets() {\n  _waitForGLTFAssets = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(gltfObjects) {\n    var remaining;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            remaining = [];\n            gltfObjects.scenes.forEach(function (scene) {\n              scene.traverse(function (model) {\n                Object.values(model.model.program.uniforms).forEach(function (uniform) {\n                  if (uniform.loaded === false) {\n                    remaining.push(uniform);\n                  }\n                });\n              });\n            });\n            _context2.next = 4;\n            return waitWhileCondition(function () {\n              return remaining.some(function (uniform) {\n                return !uniform.loaded;\n              });\n            });\n\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction waitWhileCondition(_x6) {\n  return _waitWhileCondition.apply(this, arguments);\n}\n\nfunction _waitWhileCondition() {\n  _waitWhileCondition = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(condition) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!condition()) {\n              _context3.next = 5;\n              break;\n            }\n\n            _context3.next = 3;\n            return new Promise(function (resolve) {\n              return window.requestAnimationFrame(resolve);\n            });\n\n          case 3:\n            _context3.next = 0;\n            break;\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _waitWhileCondition.apply(this, arguments);\n}\n\nexport default {\n  name: 'GLTF Scenegraph Loader',\n  extensions: ['gltf', 'glb'],\n  parse: parse\n};","map":null,"metadata":{},"sourceType":"module"}