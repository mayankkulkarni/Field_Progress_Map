{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { parse } from './lib/parse';\nimport { parseSync } from './lib/parse-sync';\nimport { fetchFile } from './lib/fetch/fetch-file';\nimport { load } from './lib/load';\nimport { resolvePath } from './lib/fetch/file-aliases';\nimport { global } from './utils/globals';\nimport * as path from './lib/path/path';\nexport { path };\nexport { setPathPrefix, getPathPrefix, resolvePath } from './lib/fetch/file-aliases.js';\nexport { fetchFile } from './lib/fetch/fetch-file';\nexport { readFileSync } from './lib/fetch/read-file';\nexport { writeFile, writeFileSync } from './lib/fetch/write-file';\nexport { getErrorMessageFromResponseSync as _getErrorMessageFromResponseSync, getErrorMessageFromResponse as _getErrorMessageFromResponse } from './lib/fetch/fetch-error-message';\nexport { registerLoaders } from './lib/register-loaders';\nexport { parse } from './lib/parse';\nexport { parseSync } from './lib/parse-sync';\nexport { parseInBatches } from './lib/parse-in-batches';\nexport { parseInBatchesSync } from './lib/parse-in-batches-sync';\nexport { load, loadInBatches } from './lib/load';\nexport { encode, encodeSync, encodeInBatches } from './lib/encode';\nexport { save, saveSync } from './lib/save';\nexport { isPromise, isIterable, isAsyncIterable, isIterator, isFetchResponse, isReadableStream, isWritableStream } from './javascript-utils/is-type';\nexport { toArrayBuffer } from './javascript-utils/binary-utils';\nexport { getStreamIterator } from './javascript-utils/stream-utils';\nexport { forEach, concatenateAsyncIterator, lineAsyncIterator, textDecoderAsyncIterator, numberedLineAsyncIterator } from './javascript-utils/async-iterator-utils';\nexport { isBrowser, self, window, global, document } from './utils/globals';\nexport { default as assert } from './utils/assert';\nexport { selectLoader as _selectLoader } from './lib/select-loader';\nexport { default as _WorkerThread } from './worker-utils/worker-thread';\nexport { default as _WorkerFarm } from './worker-utils/worker-farm';\nexport { default as _WorkerPool } from './worker-utils/worker-pool';\nexport { default as _fetchProgress } from './lib/progress/fetch-progress';\nexport { _unregisterLoaders } from './lib/register-loaders';\nexport var TextEncoder = global.TextEncoder;\nexport var TextDecoder = global.TextDecoder;\nexport function createReadStream(_x, _x2) {\n  return _createReadStream.apply(this, arguments);\n}\n\nfunction _createReadStream() {\n  _createReadStream = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, options) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.warn('createReadStream() deprecated, use fetch().then(resp => resp.body)');\n            url = resolvePath(url);\n            _context.next = 4;\n            return fetchFile(url, options);\n\n          case 4:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.body);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createReadStream.apply(this, arguments);\n}\n\nexport function parseFile() {\n  console.warn('parse() deprecated, use parse()');\n  return parse.apply(void 0, arguments);\n}\nexport function parseFileSync() {\n  console.warn('parseSync() deprecated, use parseSync()');\n  return parseSync.apply(void 0, arguments);\n}\nexport function loadFile() {\n  console.warn('loadFile() deprecated, use load()');\n  return load.apply(void 0, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}