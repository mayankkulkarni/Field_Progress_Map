{"ast":null,"code":"import { registerShaderModules, ProgramManager } from '@luma.gl/core';\nimport { fp32, picking, gouraudlighting, phonglighting } from '@luma.gl/core';\nimport geometry from './misc/geometry';\nimport project from './project/project';\nimport project32 from './project32/project32';\nimport project64 from './project64/project64';\nimport shadow from './shadow/shadow';\nvar DEFAULT_MODULES = [geometry, project];\nvar SHADER_HOOKS = ['vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)', 'vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)', 'vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)', 'fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)'];\nvar MODULE_INJECTIONS = {\n  picking: [{\n    hook: 'fs:DECKGL_FILTER_COLOR',\n    order: 99,\n    injection: \"\\n    // use highlight color if this fragment belongs to the selected object.\\n    color = picking_filterHighlightColor(color);\\n\\n    // use picking color if rendering to picking FBO.\\n    color = picking_filterPickingColor(color);\\n  \"\n  }]\n};\nexport function initializeShaderModules() {\n  registerShaderModules([fp32, project, project32, gouraudlighting, phonglighting, picking]);\n}\nexport function createProgramManager(gl) {\n  var programManager = ProgramManager.getDefaultProgramManager(gl);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = DEFAULT_MODULES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var shaderModule = _step.value;\n      programManager.addDefaultModule(shaderModule);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = SHADER_HOOKS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var shaderHook = _step2.value;\n      programManager.addShaderHook(shaderHook);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n        _iterator2[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  for (var moduleName in MODULE_INJECTIONS) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = MODULE_INJECTIONS[moduleName][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var injection = _step3.value;\n        programManager.addModuleInjection(moduleName, injection);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n          _iterator3[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  }\n\n  return programManager;\n}\nexport { picking, project, project64, gouraudlighting, phonglighting, shadow };","map":null,"metadata":{},"sourceType":"module"}