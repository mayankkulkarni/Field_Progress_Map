{"ast":null,"code":"import { log } from '@deck.gl/core';\nvar MISSING_CHAR_WIDTH = 32;\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\nexport function buildMapping(_ref) {\n  var characterSet = _ref.characterSet,\n      getFontWidth = _ref.getFontWidth,\n      fontHeight = _ref.fontHeight,\n      buffer = _ref.buffer,\n      maxCanvasWidth = _ref.maxCanvasWidth,\n      _ref$mapping = _ref.mapping,\n      mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n      _ref$xOffset = _ref.xOffset,\n      xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n      _ref$yOffset = _ref.yOffset,\n      yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset;\n  var row = 0;\n  var x = xOffset;\n  Array.from(characterSet).forEach(function (_char, i) {\n    if (!mapping[_char]) {\n      var width = getFontWidth(_char, i);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n\n      mapping[_char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width: width,\n        height: fontHeight,\n        mask: true\n      };\n      x += width + buffer * 2;\n    }\n  });\n  var rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping: mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\nexport function transformRow(row, iconMapping, lineHeight) {\n  var offsetLeft = 0;\n  var rowHeight = 0;\n  var characters = Array.from(row);\n  characters = characters.map(function (character, i) {\n    var datum = {\n      text: character,\n      offsetLeft: offsetLeft\n    };\n    var frame = iconMapping[character];\n\n    if (frame) {\n      offsetLeft += frame.width;\n\n      if (!rowHeight) {\n        rowHeight = frame.height * lineHeight;\n      }\n    } else {\n      log.warn(\"Missing character: \".concat(character))();\n      offsetLeft += MISSING_CHAR_WIDTH;\n    }\n\n    return datum;\n  });\n  return {\n    characters: characters,\n    rowWidth: offsetLeft,\n    rowHeight: rowHeight\n  };\n}\nexport function transformParagraph(paragraph, lineHeight, iconMapping, transformCharacter, transformedData) {\n  var rows = paragraph.split('\\n');\n  var size = [0, 0];\n  var offsetTop = 0;\n  rows.forEach(function (row) {\n    var _transformRow = transformRow(row, iconMapping, lineHeight),\n        characters = _transformRow.characters,\n        rowWidth = _transformRow.rowWidth,\n        rowHeight = _transformRow.rowHeight;\n\n    var rowSize = [rowWidth, rowHeight];\n    characters.forEach(function (datum) {\n      datum.offsetTop = offsetTop;\n      datum.size = size;\n      datum.rowSize = rowSize;\n      transformedData.push(transformCharacter(datum));\n    });\n    offsetTop = offsetTop + rowHeight;\n    size[0] = Math.max(size[0], rowWidth);\n  });\n  size[1] = offsetTop;\n}","map":null,"metadata":{},"sourceType":"module"}