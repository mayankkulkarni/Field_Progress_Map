{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { AmbientLight, Texture2D, ProgramManager } from '@luma.gl/core';\nimport DirectionalLight from './directional-light';\nimport Effect from '../../lib/effect';\nimport { Matrix4, Vector3 } from 'math.gl';\nimport ShadowPass from '../../passes/shadow-pass';\nimport { default as shadow } from '../../shaderlib/shadow/shadow';\nvar DEFAULT_AMBIENT_LIGHT_PROPS = {\n  color: [255, 255, 255],\n  intensity: 1.0\n};\nvar DEFAULT_DIRECTIONAL_LIGHT_PROPS = [{\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-1, -3, -1]\n}, {\n  color: [255, 255, 255],\n  intensity: 0.9,\n  direction: [1, 8, -2.5]\n}];\nvar DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];\n\nvar LightingEffect = function (_Effect) {\n  _inherits(LightingEffect, _Effect);\n\n  function LightingEffect(props) {\n    var _this;\n\n    _classCallCheck(this, LightingEffect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LightingEffect).call(this, props));\n    _this.ambientLight = null;\n    _this.directionalLights = [];\n    _this.pointLights = [];\n    _this.shadowColor = DEFAULT_SHADOW_COLOR;\n    _this.shadowPasses = [];\n    _this.dummyShadowMap = null;\n    _this.shadow = false;\n    _this.programManager = null;\n\n    for (var key in props) {\n      var lightSource = props[key];\n\n      switch (lightSource.type) {\n        case 'ambient':\n          _this.ambientLight = lightSource;\n          break;\n\n        case 'directional':\n          _this.directionalLights.push(lightSource);\n\n          break;\n\n        case 'point':\n          _this.pointLights.push(lightSource);\n\n          break;\n\n        default:\n      }\n    }\n\n    _this._applyDefaultLights();\n\n    _this.shadow = _this.directionalLights.some(function (light) {\n      return light.shadow;\n    });\n    return _this;\n  }\n\n  _createClass(LightingEffect, [{\n    key: \"prepare\",\n    value: function prepare(gl, _ref) {\n      var layers = _ref.layers,\n          viewports = _ref.viewports,\n          onViewportActive = _ref.onViewportActive,\n          views = _ref.views;\n      if (!this.shadow) return {};\n\n      var shadowMatrices = this._createLightMatrix();\n\n      if (this.shadowPasses.length === 0) {\n        this._createShadowPasses(gl);\n      }\n\n      if (!this.programManager) {\n        this.programManager = ProgramManager.getDefaultProgramManager(gl);\n\n        if (shadow) {\n          this.programManager.addDefaultModule(shadow);\n        }\n      }\n\n      if (!this.dummyShadowMap) {\n        this.dummyShadowMap = new Texture2D(gl, {\n          width: 1,\n          height: 1\n        });\n      }\n\n      var shadowMaps = [];\n\n      for (var i = 0; i < this.shadowPasses.length; i++) {\n        var shadowPass = this.shadowPasses[i];\n        shadowPass.render({\n          layers: layers.filter(function (layer) {\n            return layer.props.shadowEnabled !== false;\n          }),\n          viewports: viewports,\n          onViewportActive: onViewportActive,\n          views: views,\n          effectProps: {\n            shadowLightId: i,\n            dummyShadowMap: this.dummyShadowMap,\n            shadowMatrices: shadowMatrices\n          }\n        });\n        shadowMaps.push(shadowPass.shadowMap);\n      }\n\n      return {\n        shadowMaps: shadowMaps,\n        dummyShadowMap: this.dummyShadowMap,\n        shadowColor: this.shadowColor,\n        shadowMatrices: shadowMatrices\n      };\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters(layer) {\n      var ambientLight = this.ambientLight;\n\n      var pointLights = this._getProjectedPointLights(layer);\n\n      var directionalLights = this._getProjectedDirectionalLights(layer);\n\n      return {\n        lightSources: {\n          ambientLight: ambientLight,\n          directionalLights: directionalLights,\n          pointLights: pointLights\n        }\n      };\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.shadowPasses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var shadowPass = _step.value;\n          shadowPass[\"delete\"]();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.shadowPasses.length = 0;\n\n      if (this.dummyShadowMap) {\n        this.dummyShadowMap[\"delete\"]();\n        this.dummyShadowMap = null;\n      }\n\n      if (this.shadow && this.programManager) {\n        this.programManager.removeDefaultModule(shadow);\n        this.programManager = null;\n      }\n    }\n  }, {\n    key: \"_createLightMatrix\",\n    value: function _createLightMatrix() {\n      var lightMatrices = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.directionalLights[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var light = _step2.value;\n          var viewMatrix = new Matrix4().lookAt({\n            eye: new Vector3(light.direction).negate()\n          });\n          lightMatrices.push(viewMatrix);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return lightMatrices;\n    }\n  }, {\n    key: \"_createShadowPasses\",\n    value: function _createShadowPasses(gl) {\n      for (var i = 0; i < this.directionalLights.length; i++) {\n        this.shadowPasses.push(new ShadowPass(gl));\n      }\n    }\n  }, {\n    key: \"_applyDefaultLights\",\n    value: function _applyDefaultLights() {\n      var ambientLight = this.ambientLight,\n          pointLights = this.pointLights,\n          directionalLights = this.directionalLights;\n\n      if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {\n        this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);\n        this.directionalLights.push(new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]));\n        this.directionalLights.push(new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));\n      }\n    }\n  }, {\n    key: \"_getProjectedPointLights\",\n    value: function _getProjectedPointLights(layer) {\n      var projectedPointLights = [];\n\n      for (var i = 0; i < this.pointLights.length; i++) {\n        var pointLight = this.pointLights[i];\n        projectedPointLights.push(pointLight.getProjectedLight({\n          layer: layer\n        }));\n      }\n\n      return projectedPointLights;\n    }\n  }, {\n    key: \"_getProjectedDirectionalLights\",\n    value: function _getProjectedDirectionalLights(layer) {\n      var projectedDirectionalLights = [];\n\n      for (var i = 0; i < this.directionalLights.length; i++) {\n        var directionalLight = this.directionalLights[i];\n        projectedDirectionalLights.push(directionalLight.getProjectedLight({\n          layer: layer\n        }));\n      }\n\n      return projectedDirectionalLights;\n    }\n  }]);\n\n  return LightingEffect;\n}(Effect);\n\nexport { LightingEffect as default };","map":null,"metadata":{},"sourceType":"module"}