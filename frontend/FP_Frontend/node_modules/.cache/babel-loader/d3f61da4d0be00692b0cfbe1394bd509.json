{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport GLTFScenegraph from '../gltf-scenegraph';\nimport { KHR_LIGHTS_PUNCTUAL } from '../gltf-constants';\nimport assert from '../utils/assert';\n\nvar KHR_lights_punctual = function () {\n  function KHR_lights_punctual() {\n    _classCallCheck(this, KHR_lights_punctual);\n  }\n\n  _createClass(KHR_lights_punctual, null, [{\n    key: \"decode\",\n    value: function decode(gltfData, options) {\n      var gltfScenegraph = new GLTFScenegraph(gltfData);\n      var extension = gltfScenegraph.getExtension(KHR_LIGHTS_PUNCTUAL);\n\n      if (extension) {\n        gltfScenegraph.json.lights = extension.lights;\n        gltfScenegraph.removeExtension(KHR_LIGHTS_PUNCTUAL);\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (gltfScenegraph.nodes || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var node = _step.value;\n          var nodeExtension = node.extensions && node.extensions.KHR_lights_punctual;\n\n          if (nodeExtension) {\n            node.light = gltfScenegraph._get('lights', nodeExtension.light);\n            delete node.extensions.KHR_lights_punctual;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(gltfData, options) {\n      var gltfScenegraph = new GLTFScenegraph(gltfData);\n      var json = gltfScenegraph.json;\n\n      if (json.lights) {\n        var extension = gltfScenegraph.addExtensions(KHR_LIGHTS_PUNCTUAL);\n        assert(!extension.lights);\n        extension.lights = json.lights;\n        delete json.lights;\n      }\n\n      if (gltfScenegraph.json.lights) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = gltfScenegraph.json.lights[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var light = _step2.value;\n            var node = light.node;\n            gltfScenegraph.addObjectExtension(node, KHR_LIGHTS_PUNCTUAL, light);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        delete gltfScenegraph.json.lights;\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return KHR_LIGHTS_PUNCTUAL;\n    }\n  }]);\n\n  return KHR_lights_punctual;\n}();\n\nexport { KHR_lights_punctual as default };","map":null,"metadata":{},"sourceType":"module"}