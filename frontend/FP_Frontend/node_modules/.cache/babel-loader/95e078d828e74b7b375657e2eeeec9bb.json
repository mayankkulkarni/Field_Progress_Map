{"ast":null,"code":"import _defineProperty from \"/Users/ucheuba/Downloads/backend/frontend/FP_Frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/ucheuba/Downloads/backend/frontend/FP_Frontend/src/Components/Map/controls.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { layerControl } from './style';\nexport const SCATTERPLOT_CONTROLS = {\n  radiusScale: {\n    displayName: 'Scatterplot Radius',\n    type: 'range',\n    value: 5,\n    step: 1,\n    min: 0,\n    max: 10\n  } // showScatterplot: {\n  //   displayName: 'Show Scatterplot',\n  //   type: 'boolean',\n  //   value: false\n  // }\n\n};\nexport class LayerControls extends Component {\n  _onValueChange(settingName, newValue) {\n    const settings = this.props.settings; // Only update if we have a confirmed change\n\n    if (settings[settingName] !== newValue) {\n      // Create a new object so that shallow-equal detects a change\n      const newSettings = _objectSpread({}, this.props.settings, {\n        [settingName]: newValue\n      });\n\n      this.props.onChange(newSettings);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          title = _this$props.title,\n          settings = _this$props.settings,\n          _this$props$propTypes = _this$props.propTypes,\n          propTypes = _this$props$propTypes === void 0 ? {} : _this$props$propTypes;\n    return React.createElement(\"div\", {\n      className: \"layer-controls\",\n      style: layerControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, title && React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, title), Object.keys(settings).map(key => React.createElement(\"div\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, propTypes[key].displayName), React.createElement(\"div\", {\n      style: {\n        display: 'inline-block',\n        float: 'right'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, settings[key]), React.createElement(Setting, {\n      settingName: key,\n      value: settings[key],\n      propType: propTypes[key],\n      onChange: this._onValueChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst Setting = props => {\n  const propType = props.propType;\n\n  if (propType && propType.type) {\n    switch (propType.type) {\n      case 'range':\n        return React.createElement(Slider, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }));\n\n      case 'boolean':\n        return React.createElement(Checkbox, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }));\n\n      default:\n        return React.createElement(\"input\", Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }));\n    }\n  }\n};\n\nconst Checkbox = ({\n  settingName,\n  value,\n  onChange\n}) => {\n  return React.createElement(\"div\", {\n    key: settingName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: settingName,\n    checked: value,\n    onChange: e => onChange(settingName, e.target.checked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })));\n};\n\nconst Slider = ({\n  settingName,\n  value,\n  propType,\n  onChange\n}) => {\n  const _propType$max = propType.max,\n        max = _propType$max === void 0 ? 100 : _propType$max;\n  return React.createElement(\"div\", {\n    key: settingName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"input-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"range\",\n    id: settingName,\n    min: 0,\n    max: max,\n    step: max / 100,\n    value: value,\n    onChange: e => onChange(settingName, Number(e.target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }))));\n};","map":{"version":3,"sources":["/Users/ucheuba/Downloads/backend/frontend/FP_Frontend/src/Components/Map/controls.js"],"names":["React","Component","layerControl","SCATTERPLOT_CONTROLS","radiusScale","displayName","type","value","step","min","max","LayerControls","_onValueChange","settingName","newValue","settings","props","newSettings","onChange","render","title","propTypes","Object","keys","map","key","display","float","bind","Setting","propType","Checkbox","e","target","checked","Slider","Number"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,OAAO,MAAMC,oBAAoB,GAAG;AAChCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,WAAW,EAAE,oBADF;AAEXC,IAAAA,IAAI,EAAE,OAFK;AAGXC,IAAAA,KAAK,EAAE,CAHI;AAIXC,IAAAA,IAAI,EAAE,CAJK;AAKXC,IAAAA,GAAG,EAAE,CALM;AAMXC,IAAAA,GAAG,EAAE;AANM,GADmB,CAShC;AACA;AACA;AACA;AACA;;AAbgC,CAA7B;AAgBP,OAAO,MAAMC,aAAN,SAA4BV,SAA5B,CAAsC;AAEzCW,EAAAA,cAAc,CAACC,WAAD,EAAcC,QAAd,EAAwB;AAAA,UAC5BC,QAD4B,GACf,KAAKC,KADU,CAC5BD,QAD4B,EAEpC;;AACA,QAAIA,QAAQ,CAACF,WAAD,CAAR,KAA0BC,QAA9B,EAAwC;AACtC;AACA,YAAMG,WAAW,qBACZ,KAAKD,KAAL,CAAWD,QADC;AAEf,SAACF,WAAD,GAAeC;AAFA,QAAjB;;AAKA,WAAKE,KAAL,CAAWE,QAAX,CAAoBD,WAApB;AACD;AACF;;AAEDE,EAAAA,MAAM,GAAG;AAAA,wBACqC,KAAKH,KAD1C;AAAA,UACCI,KADD,eACCA,KADD;AAAA,UACQL,QADR,eACQA,QADR;AAAA,8CACkBM,SADlB;AAAA,UACkBA,SADlB,sCAC8B,EAD9B;AAGP,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,KAAK,EAAEnB,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGkB,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAL,CADZ,EAEGE,MAAM,CAACC,IAAP,CAAYR,QAAZ,EAAsBS,GAAtB,CAA0BC,GAAG,IAC5B;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQJ,SAAS,CAACI,GAAD,CAAT,CAAepB,WAAvB,CADF,EAEE;AAAK,MAAA,KAAK,EAAE;AAAEqB,QAAAA,OAAO,EAAE,cAAX;AAA2BC,QAAAA,KAAK,EAAE;AAAlC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,QAAQ,CAACU,GAAD,CADX,CAFF,EAKE,oBAAC,OAAD;AACE,MAAA,WAAW,EAAEA,GADf;AAEE,MAAA,KAAK,EAAEV,QAAQ,CAACU,GAAD,CAFjB;AAGE,MAAA,QAAQ,EAAEJ,SAAS,CAACI,GAAD,CAHrB;AAIE,MAAA,QAAQ,EAAE,KAAKb,cAAL,CAAoBgB,IAApB,CAAyB,IAAzB,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADD,CAFH,CADF;AAmBD;;AAtCwC;;AAyC7C,MAAMC,OAAO,GAAGb,KAAK,IAAI;AAAA,QACbc,QADa,GACAd,KADA,CACbc,QADa;;AAErB,MAAIA,QAAQ,IAAIA,QAAQ,CAACxB,IAAzB,EAA+B;AAC7B,YAAQwB,QAAQ,CAACxB,IAAjB;AACE,WAAK,OAAL;AACE,eAAO,oBAAC,MAAD,oBAAYU,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;;AAEF,WAAK,SAAL;AACE,eAAO,oBAAC,QAAD,oBAAcA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;;AACF;AACE,eAAO,+CAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAPJ;AASD;AACJ,CAbD;;AAeA,MAAMe,QAAQ,GAAG,CAAC;AAAElB,EAAAA,WAAF;AAAeN,EAAAA,KAAf;AAAsBW,EAAAA;AAAtB,CAAD,KAAsC;AACnD,SACE;AAAK,IAAA,GAAG,EAAEL,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,EAAE,EAAEA,WAFN;AAGE,IAAA,OAAO,EAAEN,KAHX;AAIE,IAAA,QAAQ,EAAEyB,CAAC,IAAId,QAAQ,CAACL,WAAD,EAAcmB,CAAC,CAACC,MAAF,CAASC,OAAvB,CAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAYD,CAbH;;AAeE,MAAMC,MAAM,GAAG,CAAC;AAAEtB,EAAAA,WAAF;AAAeN,EAAAA,KAAf;AAAsBuB,EAAAA,QAAtB;AAAgCZ,EAAAA;AAAhC,CAAD,KAAgD;AAAA,wBACvCY,QADuC,CACrDpB,GADqD;AAAA,QACrDA,GADqD,8BAC/C,GAD+C;AAG7D,SACE;AAAK,IAAA,GAAG,EAAEG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,EAAE,EAAEA,WAFN;AAGE,IAAA,GAAG,EAAE,CAHP;AAIE,IAAA,GAAG,EAAEH,GAJP;AAKE,IAAA,IAAI,EAAEA,GAAG,GAAG,GALd;AAME,IAAA,KAAK,EAAEH,KANT;AAOE,IAAA,QAAQ,EAAEyB,CAAC,IAAId,QAAQ,CAACL,WAAD,EAAcuB,MAAM,CAACJ,CAAC,CAACC,MAAF,CAAS1B,KAAV,CAApB,CAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AAiBH,CApBC","sourcesContent":["import React, { Component } from 'react';\nimport { layerControl } from './style';\n\nexport const SCATTERPLOT_CONTROLS = {\n    radiusScale: {\n      displayName: 'Scatterplot Radius',\n      type: 'range',\n      value: 5,\n      step: 1,\n      min: 0,\n      max: 10\n    },\n    // showScatterplot: {\n    //   displayName: 'Show Scatterplot',\n    //   type: 'boolean',\n    //   value: false\n    // }\n};\n\nexport class LayerControls extends Component {\n\n    _onValueChange(settingName, newValue) {\n      const { settings } = this.props;\n      // Only update if we have a confirmed change\n      if (settings[settingName] !== newValue) {\n        // Create a new object so that shallow-equal detects a change\n        const newSettings = {\n          ...this.props.settings,\n          [settingName]: newValue\n        };\n  \n        this.props.onChange(newSettings);\n      }\n    }\n  \n    render() {\n      const { title, settings, propTypes = {} } = this.props;\n  \n      return (\n        <div className=\"layer-controls\" style={layerControl}>\n          {title && <h4>{title}</h4>}\n          {Object.keys(settings).map(key => (\n            <div key={key}>\n              <label>{propTypes[key].displayName}</label>\n              <div style={{ display: 'inline-block', float: 'right' }}>\n                {settings[key]}\n              </div>\n              <Setting\n                settingName={key}\n                value={settings[key]}\n                propType={propTypes[key]}\n                onChange={this._onValueChange.bind(this)}\n              />\n            </div>\n          ))}\n        </div>\n      );\n    }\n}\n\nconst Setting = props => {\n    const { propType } = props;\n    if (propType && propType.type) {\n      switch (propType.type) {\n        case 'range':\n          return <Slider {...props} />;\n  \n        case 'boolean':\n          return <Checkbox {...props} />;\n        default:\n          return <input {...props} />;\n      }\n    }\n};\n\nconst Checkbox = ({ settingName, value, onChange }) => {\n    return (\n      <div key={settingName}>\n        <div className=\"input-group\">\n          <input\n            type=\"checkbox\"\n            id={settingName}\n            checked={value}\n            onChange={e => onChange(settingName, e.target.checked)}\n          />\n        </div>\n      </div>\n    );\n  };\n  \n  const Slider = ({ settingName, value, propType, onChange }) => {\n    const { max = 100 } = propType;\n  \n    return (\n      <div key={settingName}>\n        <div className=\"input-group\">\n          <div>\n            <input\n              type=\"range\"\n              id={settingName}\n              min={0}\n              max={max}\n              step={max / 100}\n              value={value}\n              onChange={e => onChange(settingName, Number(e.target.value))}\n            />\n          </div>\n        </div>\n      </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}