{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport parseGLBSync from './lib/parse-glb';\nexport default {\n  name: 'GLB',\n  extensions: ['glb'],\n  mimeType: 'model/gltf-binary',\n  binary: true,\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", parseSync(arrayBuffer, options));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  parseSync: parseSync,\n  defaultOptions: {\n    strict: false\n  }\n};\n\nfunction parseSync(arrayBuffer, options) {\n  var _options$byteOffset = options.byteOffset,\n      byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var glb = {};\n  parseGLBSync(glb, arrayBuffer, byteOffset, options);\n  return glb;\n}","map":null,"metadata":{},"sourceType":"module"}