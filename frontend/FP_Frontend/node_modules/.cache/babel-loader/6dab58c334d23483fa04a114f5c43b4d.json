{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { getImageMetadata } from '@loaders.gl/images';\nimport assert from '../utils/assert';\nimport { KHR_DRACO_MESH_COMPRESSION, UBER_POINT_CLOUD_EXTENSION } from '../gltf-constants';\nimport GLBBuilder from './glb-builder';\nimport packBinaryJson from './packed-json/pack-binary-json';\n\nvar GLTFBuilder = function (_GLBBuilder) {\n  _inherits(GLTFBuilder, _GLBBuilder);\n\n  function GLTFBuilder() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GLTFBuilder);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GLTFBuilder).call(this, options));\n    _this.DracoWriter = options.DracoWriter;\n    _this.DracoLoader = options.DracoLoader;\n    return _this;\n  }\n\n  _createClass(GLTFBuilder, [{\n    key: \"addApplicationData\",\n    value: function addApplicationData(key, data) {\n      var packOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var jsonData = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n      this.json[key] = jsonData;\n      return this;\n    }\n  }, {\n    key: \"addExtraData\",\n    value: function addExtraData(key, data) {\n      var packOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var packedJson = packOptions.packedTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n      this.json.extras = this.json.extras || {};\n      this.json.extras[key] = packedJson;\n      return this;\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extensionName, data) {\n      var packOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      assert(data);\n      var packedJson = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n      this.json.extensions = this.json.extensions || {};\n      this.json.extensions[extensionName] = packedJson;\n      this.registerUsedExtension(extensionName);\n      return this;\n    }\n  }, {\n    key: \"addRequiredExtension\",\n    value: function addRequiredExtension(extensionName, data) {\n      var packOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      assert(data);\n      var packedJson = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n      this.addExtension(extensionName, packedJson);\n      this.registerRequiredExtension(extensionName);\n      return this;\n    }\n  }, {\n    key: \"registerUsedExtension\",\n    value: function registerUsedExtension(extensionName) {\n      this.json.extensionsUsed = this.json.extensionsUsed || [];\n\n      if (!this.json.extensionsUsed.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsUsed.push(extensionName);\n      }\n    }\n  }, {\n    key: \"registerRequiredExtension\",\n    value: function registerRequiredExtension(extensionName) {\n      this.registerUsedExtension(extensionName);\n      this.json.extensionsRequired = this.json.extensionsRequired || [];\n\n      if (!this.json.extensionsRequired.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsRequired.push(extensionName);\n      }\n    }\n  }, {\n    key: \"addMesh\",\n    value: function addMesh(attributes, indices) {\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n\n      var accessors = this._addAttributes(attributes);\n\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessors,\n          indices: indices,\n          mode: mode\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addPointCloud\",\n    value: function addPointCloud(attributes) {\n      var accessorIndices = this._addAttributes(attributes);\n\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessorIndices,\n          mode: 0\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addCompressedMesh\",\n    value: function addCompressedMesh(attributes, indices) {\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n\n      if (!this.DracoWriter || !this.DracoLoader) {\n        throw new Error('DracoWriter/DracoLoader not available');\n      }\n\n      this.registerRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n      var compressedData = this.DracoWriter.encodeSync({\n        attributes: attributes\n      });\n      var decodedData = this.DracoLoader.parseSync({\n        attributes: attributes\n      });\n\n      var fauxAccessors = this._addFauxAttributes(decodedData.attributes);\n\n      var bufferViewIndex = this.addBufferView(compressedData);\n      var glTFMesh = {\n        primitives: [{\n          attributes: fauxAccessors,\n          mode: mode,\n          extensions: _defineProperty({}, KHR_DRACO_MESH_COMPRESSION, {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors\n          })\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addCompressedPointCloud\",\n    value: function addCompressedPointCloud(attributes) {\n      if (!this.DracoWriter || !this.DracoLoader) {\n        throw new Error('DracoWriter/DracoLoader not available');\n      }\n\n      attributes.mode = 0;\n      var compressedData = this.DracoWriter.encodeSync(attributes, {\n        pointcloud: true\n      });\n      var bufferViewIndex = this.addBufferView(compressedData);\n      var glTFMesh = {\n        primitives: [{\n          attributes: {},\n          mode: 0,\n          extensions: _defineProperty({}, UBER_POINT_CLOUD_EXTENSION, {\n            bufferView: bufferViewIndex\n          })\n        }]\n      };\n      this.registerRequiredExtension(UBER_POINT_CLOUD_EXTENSION);\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(imageData) {\n      var bufferViewIndex = this.addBufferView(imageData);\n      var sizeAndType = getImageMetadata(imageData) || {};\n\n      if (sizeAndType) {\n        var mimeType = sizeAndType.mimeType,\n            width = sizeAndType.width,\n            height = sizeAndType.height;\n        this.json.images.push({\n          bufferView: bufferViewIndex,\n          mimeType: mimeType,\n          width: width,\n          height: height\n        });\n      } else {\n        this.json.images.push({\n          bufferView: bufferViewIndex\n        });\n      }\n\n      return this.json.images.length - 1;\n    }\n  }]);\n\n  return GLTFBuilder;\n}(GLBBuilder);\n\nexport { GLTFBuilder as default };","map":null,"metadata":{},"sourceType":"module"}