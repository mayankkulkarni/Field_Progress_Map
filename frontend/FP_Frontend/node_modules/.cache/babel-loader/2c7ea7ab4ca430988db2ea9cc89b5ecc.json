{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { toArrayBuffer } from '../../javascript-utils/binary-utils';\nimport WorkerFarm from '../../worker-utils/worker-farm';\nimport { parse } from '../parse';\nimport { getTransferList } from '../../worker-utils/worker-utils';\nvar _workerFarm = null;\n\nfunction getWorkerFarm() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var props = {};\n\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({\n      onMessage: onWorkerMessage\n    });\n  }\n\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nfunction onWorkerMessage(_x) {\n  return _onWorkerMessage.apply(this, arguments);\n}\n\nfunction _onWorkerMessage() {\n  _onWorkerMessage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref) {\n    var worker, data, resolve, reject, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            worker = _ref.worker, data = _ref.data, resolve = _ref.resolve, reject = _ref.reject;\n            _context.t0 = data.type;\n            _context.next = _context.t0 === 'done' ? 4 : _context.t0 === 'process' ? 6 : _context.t0 === 'error' ? 17 : 19;\n            break;\n\n          case 4:\n            resolve(data.result);\n            return _context.abrupt(\"break\", 19);\n\n          case 6:\n            _context.prev = 6;\n            _context.next = 9;\n            return parse(data.arraybuffer, data.options, data.url);\n\n          case 9:\n            result = _context.sent;\n            worker.postMessage({\n              type: 'process-done',\n              id: data.id,\n              result: result\n            }, getTransferList(result));\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t1 = _context[\"catch\"](6);\n            worker.postMessage({\n              type: 'process-error',\n              id: data.id,\n              message: _context.t1.message\n            });\n\n          case 16:\n            return _context.abrupt(\"break\", 19);\n\n          case 17:\n            reject(data.message);\n            return _context.abrupt(\"break\", 19);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 13]]);\n  }));\n  return _onWorkerMessage.apply(this, arguments);\n}\n\nexport default function parseWithWorker(workerSource, workerName, data) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var context = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var workerFarm = getWorkerFarm(options);\n  options = JSON.parse(JSON.stringify(options));\n  return workerFarm.process(workerSource, \"loaders.gl-\".concat(workerName), {\n    arraybuffer: toArrayBuffer(data),\n    options: options,\n    source: 'loaders.gl',\n    type: 'process'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}