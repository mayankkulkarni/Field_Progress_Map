{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport getTransferList from './get-transfer-list';\nexport default function createWorker(loader) {\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  self.onmessage = function () {\n    var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(evt) {\n      var data, arraybuffer, _data$byteOffset, byteOffset, _data$byteLength, byteLength, _data$options, options, result, transferList;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = evt.data;\n              _context.prev = 1;\n\n              if (isKnownMessage(data, loader.name)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              arraybuffer = data.arraybuffer, _data$byteOffset = data.byteOffset, byteOffset = _data$byteOffset === void 0 ? 0 : _data$byteOffset, _data$byteLength = data.byteLength, byteLength = _data$byteLength === void 0 ? 0 : _data$byteLength, _data$options = data.options, options = _data$options === void 0 ? {} : _data$options;\n              _context.next = 7;\n              return parseData(loader, arraybuffer, byteOffset, byteLength, options);\n\n            case 7:\n              result = _context.sent;\n              transferList = getTransferList(result);\n              self.postMessage({\n                type: 'done',\n                result: result\n              }, transferList);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              self.postMessage({\n                type: 'error',\n                message: _context.t0.message\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var requestId = 0;\n\n  self.parse = function (arraybuffer) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var url = arguments.length > 2 ? arguments[2] : undefined;\n    return new Promise(function (resolve, reject) {\n      var id = requestId++;\n\n      var onMessage = function onMessage(_ref2) {\n        var data = _ref2.data;\n\n        if (!data || data.id !== id) {\n          return;\n        }\n\n        switch (data.type) {\n          case 'process-done':\n            self.removeEventListener('message', onMessage);\n            resolve(data.result);\n            break;\n\n          case 'process-error':\n            self.removeEventListener('message', onMessage);\n            reject(data.message);\n            break;\n\n          default:\n        }\n      };\n\n      self.addEventListener('message', onMessage);\n      self.postMessage({\n        type: 'process',\n        id: id,\n        arraybuffer: arraybuffer,\n        options: options,\n        url: url\n      }, [arraybuffer]);\n    });\n  };\n}\n\nfunction parseData(_x2, _x3, _x4, _x5, _x6) {\n  return _parseData.apply(this, arguments);\n}\n\nfunction _parseData() {\n  _parseData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(loader, arraybuffer, byteOffset, byteLength, options) {\n    var data, parser, textDecoder;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(loader.parseSync || loader.parse)) {\n              _context2.next = 5;\n              break;\n            }\n\n            data = arraybuffer;\n            parser = loader.parseSync || loader.parse;\n            _context2.next = 12;\n            break;\n\n          case 5:\n            if (!loader.parseTextSync) {\n              _context2.next = 11;\n              break;\n            }\n\n            textDecoder = new TextDecoder();\n            data = textDecoder.decode(arraybuffer);\n            parser = loader.parseTextSync;\n            _context2.next = 12;\n            break;\n\n          case 11:\n            throw new Error(\"Could not load data with \".concat(loader.name, \" loader\"));\n\n          case 12:\n            _context2.next = 14;\n            return parser(data, options);\n\n          case 14:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseData.apply(this, arguments);\n}\n\nfunction isKnownMessage(data, name) {\n  return data && data.type === 'process' && data.source === 'loaders.gl';\n}","map":null,"metadata":{},"sourceType":"module"}