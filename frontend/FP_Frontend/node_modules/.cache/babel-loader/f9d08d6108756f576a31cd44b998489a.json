{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isLoaderObject } from './loader-utils/normalize-loader';\nimport { mergeLoaderAndUserOptions } from './loader-utils/normalize-options';\nimport { getIteratorFromData } from './loader-utils/get-data';\nimport { getLoaderContext } from './loader-utils/get-loader-context';\nimport { selectLoader } from './select-loader';\nexport function parseInBatchesSync(_x, _x2, _x3, _x4) {\n  return _parseInBatchesSync.apply(this, arguments);\n}\n\nfunction _parseInBatchesSync() {\n  _parseInBatchesSync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, url) {\n    var loader, context;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              url = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            loader = selectLoader(loaders, url, null);\n            options = mergeLoaderAndUserOptions(options, loader);\n            context = getLoaderContext({\n              url: url\n            }, options);\n            return _context.abrupt(\"return\", parseWithLoaderInBatchesSync(loader, data, options, context));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseInBatchesSync.apply(this, arguments);\n}\n\nfunction parseWithLoaderInBatchesSync(loader, data, options, context) {\n  if (loader.parseInBatchesSync) {\n    var inputIterator = getIteratorFromData(data);\n    var outputIterator = loader.parseInBatchesSync(inputIterator, options, context, loader);\n    return outputIterator;\n  }\n\n  throw new Error('parseWithLoaderInBatchesSync not available');\n}","map":null,"metadata":{},"sourceType":"module"}