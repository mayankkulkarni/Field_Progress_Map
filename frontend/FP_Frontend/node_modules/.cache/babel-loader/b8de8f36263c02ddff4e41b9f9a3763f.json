{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { deepEqual } from '../utils/deep-equal';\nexport var LayerExtension = function () {\n  function LayerExtension() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LayerExtension);\n\n    this.opts = opts;\n  }\n\n  _createClass(LayerExtension, [{\n    key: \"equals\",\n    value: function equals(extension) {\n      if (this === extension) {\n        return true;\n      }\n\n      return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      return null;\n    }\n  }, {\n    key: \"getSubLayerProps\",\n    value: function getSubLayerProps(extension) {\n      var _extension$constructo = extension.constructor.defaultProps,\n          defaultProps = _extension$constructo === void 0 ? {} : _extension$constructo;\n      var newProps = {\n        updateTriggers: {}\n      };\n\n      for (var key in defaultProps) {\n        if (key in this.props) {\n          var propDef = defaultProps[key];\n          var propValue = this.props[key];\n          newProps[key] = propValue;\n\n          if (propDef && propDef.type === 'accessor') {\n            newProps.updateTriggers[key] = this.props.updateTriggers[key];\n\n            if (typeof propValue === 'function') {\n              newProps[key] = this.getSubLayerAccessor(propValue, true);\n            }\n          }\n        }\n      }\n\n      return newProps;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {}\n  }, {\n    key: \"updateState\",\n    value: function updateState(params, extension) {}\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(extension) {}\n  }]);\n\n  return LayerExtension;\n}();","map":null,"metadata":{},"sourceType":"module"}