{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec4 from 'gl-matrix/vec3';\nimport { vec4_transformMat2, vec4_transformMat3 } from '../lib/gl-matrix-extras';\n\nvar Vector4 = function (_Vector) {\n  _inherits(Vector4, _Vector);\n\n  function Vector4() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Vector4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector4).call(this, -0, -0, -0, -0));\n\n    if (isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n        checkNumber(w);\n      }\n\n      _this[0] = x;\n      _this[1] = y;\n      _this[2] = z;\n      _this[3] = w;\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector4, [{\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = w;\n      return this.check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      return this.check();\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(object) {\n      if (config.debug) {\n        checkNumber(object.x);\n        checkNumber(object.y);\n        checkNumber(object.z);\n        checkNumber(object.w);\n      }\n\n      this[0] = object.x;\n      this[1] = object.y;\n      this[2] = object.z;\n      this[3] = object.w;\n      return this;\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject(object) {\n      object.x = this[0];\n      object.y = this[1];\n      object.z = this[2];\n      object.w = this[3];\n      return object;\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(matrix4) {\n      vec4.transformMat4(this, this, matrix4);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix3\",\n    value: function transformByMatrix3(matrix3) {\n      vec4_transformMat3(this, this, matrix3);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix2\",\n    value: function transformByMatrix2(matrix2) {\n      vec4_transformMat2(this, this, matrix2);\n      return this.check();\n    }\n  }, {\n    key: \"transformByQuaternion\",\n    value: function transformByQuaternion(quaternion) {\n      vec4.transformQuat(this, this, quaternion);\n      return this.check();\n    }\n  }, {\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(m) {\n      m.transform(this, this);\n      return this;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Vector4;\n}(Vector);\n\nexport { Vector4 as default };","map":null,"metadata":{},"sourceType":"module"}